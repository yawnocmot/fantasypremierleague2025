---
title: "Get data"
author: "Tom Conway"
format: 
  gfm: default
  html:
    embed-resources: true
editor: visual
---

## Get data

### Get data from FPL API and structure into separate files.

```{r}
#| label: set-up
#| include: false

#Set up libraries required

library(httr)
library(jsonlite)
library(tidyverse)
library(worldfootballR)

```

Get data from FPL API - keep separate so don't re-run it.

```{r}
#| label: fpl-api


url <- "https://fantasy.premierleague.com/api/bootstrap-static/"
response <- GET(url)

fpl_data <- fromJSON(content(response, "text"))

```

Next - take out the different tables and give good names. Make the data frames into

```{r}
#| label: split-fpl-data



# Chips - gives chips with names, quantity, start and end, and chip types
# Data structure is almost normal, but lots associated with the assistant manager chip is not.
# Add assistant manager to the list of things to work out later.
fpl_chips <- tibble(fpl_data$chips)

# Events - gives details of each game week.
# Key columns appear to be the deadline, whether the week has passed, is current, or is next, 
# and details of which players have been most chosen or transferred in.

fpl_events <- tibble(fpl_data$events)

# Game_settings - a list containing the parameters for the game. 
# Can capture as might be helpful to reference these if things change in different seasons (e.g. squad value)

fpl_game_settings <- fpl_data$game_settings

# Game_config - a further list with some additional rules (broken into other lists).
# Contains useful parameters like the number of points for different events

fpl_game_config <- fpl_data$game_config

# Phases - the different phases that scores get summarised on, with their start and end weeks
# Whole season plus months.

fpl_phases <- tibble(fpl_data$phases)

# Teams - lists teams with a unique code, whether they have played this week, and some indications of their overall strength.

fpl_teams <- tibble(fpl_data$teams)

fpl_teams |> write_csv("processed_data/fpl_teams.csv")

# Total_players - how many players are currently in the game - updates in real time.

fpl_total_players <- fpl_data$total_players

# Element_stats - a list of the different stats that players have associated with them.
# Each has a display name and a data column name

fpl_element_stats <- tibble(fpl_data$element_stats)

# Element_types - a list of the 4 different player types, plus managers, and their attributes.

fpl_element_types <- tibble(fpl_data$element_types)

# Elements - the big table of players - have as a tibble. Over 100 variables about each player. This will be the key source of data.

fpl_elements <- tibble(fpl_data$elements)

fpl_elements |> write_csv("processed_data/fpl_elements.csv")

# Fixtures - this is also available from the API, the future fixtures.

fpl_fixtures <- tibble(fromJSON("https://fantasy.premierleague.com/api/fixtures/"))

fpl_fixtures |> write_csv("processed_data/fpl_fixtures.csv")


# Game week data - pull the summaries of what has happened in each gameweek

game_week_data <- function(gw){
  url <- sprintf("https://fantasy.premierleague.com/api/event/%d/live/", gw)
  response <- GET(url)
  fpl_data <- fromJSON(content(response, "text"))
  
  fpl_data$elements$stats|>
    as_tibble()|>
    cbind(fpl_data$elements$id)|>
    mutate(id = `fpl_data$elements$id`,
            GW = gw,
            .keep = "unused")|>
    as_tibble()
}

gw_max <- fpl_fixtures |> 
  filter(finished == TRUE) |> 
  arrange(desc(event)) |>
  head(1) |>
  pull(event)

# Only have gw 1 for now so can't test binding multiple game weeks.
fpl_gw <- map_dfr(1:gw_max,game_week_data) |>
  select(id_2026 = id, GW, goals_scored, assists, minutes)

fpl_gw |> write_csv("processed_data/fpl_gw.csv")

```

Find data of results by team - get data from Openfootball API in Github. Openfootball has the full list of scores in table format, but with some errors. It also depends on when someone updates their repository on github, which slows down the process. Can I find a better place to get live premier league scores from?

```{r}
#| label: openfootball-api

url2 <- "https://raw.githubusercontent.com/openfootball/football.json/refs/heads/master/2024-25/en.1.json"
response2 <-GET(url2)

open_football_data <- fromJSON(content(response2,"text"))

open_football_data_2 <- open_football_data$matches |>
  unnest_wider(score, names_sep = "_")|>
  unnest_wider(score_ht, names_sep = "_")|>
  unnest_wider(score_ht_1, names_sep = "_")|>
  unnest_wider(score_ft, names_sep = "_")|>
  unnest_wider(score_ft_1, names_sep = "_")

# Also get data from the earlier years

open_football_year <- function(url) {
  response <- GET(url)
  open_football_data <- fromJSON(content(response,"text"))
  open_football_data <- open_football_data$matches |>
  unnest_wider(score, names_sep = "_")|>
  unnest_wider(score_ht, names_sep = "_")|>
  unnest_wider(score_ht_1, names_sep = "_")|>
  unnest_wider(score_ft, names_sep = "_")|>
  unnest_wider(score_ft_1, names_sep = "_")
  open_football_data
}

open_football_2023_24 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2023-24/en.1.json")
open_football_2022_23 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2022-23/en.1.json")
open_football_2021_22 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2021-22/en.1.json")

open_football_21_25 <- rbind(
  open_football_2021_22 |> mutate(
    match_number = row_number(date),
    season_end = 2022),
  open_football_2022_23 |> mutate(
    match_number = row_number(date),
    season_end = 2023),
  open_football_2023_24 |> mutate(
    match_number = row_number(date),
    season_end = 2024),
  open_football_data_2 |> mutate(
    match_number = row_number(date),
    season_end = 2025)
  )

open_football_21_25 |> write_csv("processed_data/open_football_21_25.csv")

# and also championship data for information on promoted teams

open_football_championship_2024_25 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2024-25/en.2.json")
open_football_championship_2023_24 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2023-24/en.2.json")
open_football_championship_2022_23 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2022-23/en.2.json")|>
  select(!c(score_et,score_p))
open_football_championship_2021_22 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2021-22/en.2.json")|>
  select(!c(score_et,score_p))

open_football_champ_21_25 <- rbind(
  open_football_championship_2021_22 |> mutate(
    match_number = row_number(date),
    season_end = 2022)|>
    select(-stage),
  open_football_championship_2022_23 |> mutate(
    match_number = row_number(date),
    season_end = 2023)|>
    select(-stage),
  open_football_championship_2023_24 |> mutate(
    match_number = row_number(date),
    season_end = 2024)|>
    select(-stage),
  open_football_championship_2024_25 |> mutate(
    match_number = row_number(date),
    season_end = 2025)|>
    select(-score_et)
)

open_football_champ_21_25 |> write_csv("processed_data/open_football_champ_21_25.csv")
```

-   Openfootball seems unreliable - here is another JSON API from fixturedownload.com

```{r}
#| label: fixture-download-feed

url3 <- "https://fixturedownload.com/feed/json/epl-2024"
response3 <- GET(url3)

fixture_download_data <- tibble(fromJSON(content(response3, "text")))

write_csv(fixture_download_data,"processed_data/fixture_download_data.csv")
```

-   Want historical goal scored data per game - can use Vaastav's repository of FPL data for this

```{r}
#| label: vaastav-goals-assists-2025

url4 <- "https://raw.githubusercontent.com/vaastav/Fantasy-Premier-League/master/data/2024-25/gws/merged_gw.csv"

vaastav_2025 <- tibble(read.csv(url4))

# Want to have player, gw, assists, goals, element, kickoff_time, minutes
# Can come back to get yellow/red cards, bonus points

vaastav_2025 <- vaastav_2025 |>
  select(name, id_2025 = element, GW, kickoff_time, goals_scored, assists, minutes, team)

# id numbers are different, so need to have a lookup distionary by name

id_2026 <- fpl_elements |>
  select(first_name, second_name, id_2026 = id) |>
  mutate(name = str_c(first_name, " ", second_name),
         .keep = "unused") 

vaastav_2025 <- vaastav_2025 |>
  left_join(id_2026, join_by(name == name))

# Only about 1/3 of players have matches by name. Looking at Spurs it makes sense, apart from Pedro Porro. United also makes sense

# Check numbers by team

vaastav_2025 |>
  group_by(team)|>
  summarise(
    n_missing    = sum(is.na(id_2026)),
    n_not_missing = sum(!is.na(id_2026)),
    .groups = "drop"
  )|>
  mutate(
    percent_missing = n_missing / (n_missing + n_not_missing)
  ) |>
  arrange(desc(n_missing))

# Looks like Vaastav has loads of artefacts that sit in the data - for the teams the percentage missing looks right, so I think we're all good. Need to watch for people like Pedro Porro that have changed names and come back to it. This will change the data for each:

vaastav_2025 |>
  filter(is.na(id_2026))|>
  filter(!is.na(id_2025))|>
  group_by(name)|>
  summarise(first(id_2025))

missing_match <- tribble(
  ~id_2025, ~id_2026,
  625, 420,
  239, 326,
  372, 453,
  310, 366,
  367, 431,
  716, 567,
  365, 454,
  153, 229,
  342, 416,
  325, 101,
  776, 467,
  211, 256,
  15,  1,
  714, 169,
  628, 148,
  581, 221,
  109, 105,
  222, 302,
  596, 518,
  121, 161,
  713, 80,
  152, 2,
  162, 227,
  327, 383,
  80,  91,
  652, 459,
  79,  72,
  356, 407,
  541, 450,
  524, 605,
  633, 22,
  436, 506,
  765, 423,
  198, 285,
  495, 568,
  122, 147,
  252, 337,
  361, 408,
  185, 220,
  360, 421,
  571, 415,
  564, 636,
  567, 637,
  558, 634
)

vaastav_2025 <- vaastav_2025 |>
  rows_patch(missing_match)
  

write_csv(vaastav_2025,"processed_data/vaastav_2025.csv")

```

-   Also can bring in fbref data using worldfootballR:

```{r}
#| label: fbref-championship


# Fetch the standard stats for every player in the 2024–25 Championship
champ_stats_24_25 <- fb_league_stats(
  country          = "ENG",       # England
  gender           = "M",         # Men’s competition
  season_end_year  = 2025,        # season = 2024/25
  tier             = "2nd",       # Championship is the 2nd tier
  stat_type        = "standard",  # basic stats: apps, mins, goals, assists, etc.
  team_or_player   = "player",    # we want per‑player, not per‑team
  time_pause       = 3            # polite pause between FBref requests
)|>
  as_tibble()


# Pull out just what you need and rename for clarity.
champ_players_2025 <- champ_stats_24_25 |>
  transmute(
    name        = Player,
    team        = Squad,
    minutes_any = `MP_Playing Time`,    # matches played
    minutes_60  = `Starts_Playing Time`,   # use as proxy for playing over 60 mins
    goals       = Gls,   # goals scored
    assists     = Ast    # assists
  )

# Match to FPL 2026 ids:

champ_players_2025 <- champ_players_2025 |>
  left_join(id_2026, join_by ( name == name))

write_csv(champ_players_2025,"processed_data/champ_players_2025.csv")


```
