open_football_21_25 <- read_csv("processed_data/open_football_21_25.csv")
fixture_download_data <- read_csv("processed_data/fixture_download_data.csv")
fpl_fixtures <- read_csv("processed_data/fpl_fixtures.csv")
#| label: team-fixtures
# Want to have team names and numbers from fpl_teams
# id changes season to season, but code is consistent through seasons. the elements file has both. Also want full name and short name
# Need it twice to join both home and away
fpl_team_id_home <- fpl_teams |>
select(home_code = code,
home_id = id,
home_team = name,
home_short_name = short_name)
fpl_team_id_away <- fpl_teams |>
select(away_code = code,
away_id = id,
away_team = name,
away_short_name = short_name)
# Join these names with fixture_down_load data for this season's fixtures by the HomeTeam and AwayTeam names.
fixture_data <- fpl_fixtures |>
select(id, event, kickoff_time, team_a, team_a_score, team_h, team_h_score) |>
left_join(fpl_team_id_home, join_by(team_h == home_id))|>
left_join(fpl_team_id_away, join_by(team_a == away_id))|>
janitor::clean_names()|>
# turn date into a datetime
mutate(date_utc = ymd_hms(kickoff_time),
match_number = id,
round_number = event,
home_team_score = team_h_score,
away_team_score = team_a_score,
season_end = 2026,
.keep = "unused") |>
select(!c(team_a, team_h))
# next - consider the open_football data - just premier league here.
# We want to get the data in the same format as fixture_data
open_football_21_25 <- open_football_21_25|>
select(match_number,
round_number = round,
date,
time,
home_team = team1,
away_team = team2,
home_team_score = score_ft_1_1,
away_team_score = score_ft_1_2,
season_end
) |>
# turn date and time into date time
mutate(date_utc = ymd_hms(str_c(date," ",time)),
.keep = "unused",
.after = round_number)|>
# turn round_number into a number
mutate(round_number = as.numeric(str_extract(round_number,"\\d+")))
# next we need to change the names of the teams - using a lookup table?
names_open_football <- open_football_21_25|>
group_by(home_team)|>
summarise()
names_fixtures <- fixture_data |>
group_by(home_team) |>
summarise()
# Create a function to change things.
names_open_football_to_fixtures <- function(names_data){
# FC after each one
str_replace_all({{names_data}},
c(" FC" = "",
# AFC before Bournemouth
"AFC " = "",
# & Hove Albion after Brighton
" & Hove Albion" = "",
# Wolves vs Wolverhampton Wanderers
"Wolverhampton Wanderers" = "Wolves",
# City after Leicester
"Leicester City" = "Leicester",
# Spurs vs Tottenham Hotspur
"Tottenham Hotspur" = "Spurs",
# Manchester vs Man
"Manchester" = "Man",
# Utd vs United for Manchester
"Man United" = "Man Utd",
# No United after Newcastle, West Ham, or Leeds
" United" = "",
# Nottingham Forest to Nott'm Forest
"Nottingham" = "Nott'm")
)
}
# Check it works
names_open_football <- names_open_football |>
mutate(home_team = names_open_football_to_fixtures(home_team))
# It does, apply to the main open_football dataset
open_football_21_25 <- open_football_21_25 |>
mutate(home_team = names_open_football_to_fixtures(home_team),
away_team = names_open_football_to_fixtures(away_team)
)
# Then add short names and codes
name_finder <- fixture_data |>
select(home_team, home_code, home_short_name)|>
group_by(home_team, home_code, home_short_name) |>
summarise()|>
rename(team = home_team,
code = home_code,
short_name = home_short_name)|>
# create dummy codes for those not here - can come back and change if promoted
rbind(tribble(~team, ~code, ~short_name,
"Southampton", 99, "SOU",
"Leicester", 98, "LEI",
"Luton Town", 97, "LUT",
"Norwich City", 96, "NOR",
"Sheffield", 95, "SHU",
"Watford", 92, "WAT", # Note Brentford has 94
"Ipswich Town", 93, "IPS"
))
write_csv(name_finder, "processed_data/name_finder.csv")
open_football_21_25 <- open_football_21_25 |>
left_join(name_finder, by = join_by(home_team == team))|>
rename(home_code = code,
home_short_name = short_name)|>
left_join(name_finder, by = join_by(away_team == team))|>
rename(away_code = code,
away_short_name = short_name)|>
relocate(season_end,.after = away_short_name)
# Now should all be the same, can we rbind?
all_fixtures <- rbind(fixture_data, open_football_21_25)
all_fixtures
#| label: poisson-simple
# Very simple model says score ~ Poiss(attacker + defender + home/away)
# So actually need to reformat the data again.
# Need each line to be attacker, defender, home/away, score
# create functions to pivot from score per row to match per row and vice versa
score_per_row <- function(data) {
data|> pivot_longer(
cols = c(home_team_score, away_team_score),
names_to = "home_or_away"
)|>
mutate(
attacker_name = if_else(home_or_away == "home_team_score",
home_team,
away_team),
defender_name = if_else(home_or_away == "home_team_score",
away_team,
home_team),
attacker_code = if_else(home_or_away == "home_team_score",
home_code,
away_code),
defender_code = if_else(home_or_away == "home_team_score",
away_code,
home_code),
attacker_short_name = if_else(home_or_away == "home_team_score",
home_short_name,
away_short_name),
defender_short_name = if_else(home_or_away == "home_team_score",
away_short_name,
home_short_name),
home_or_away = if_else(home_or_away == "home_team_score",
"home",
"away")
)
}
match_per_row <- function(data, score){
data |>
mutate(
home_team = if_else(home_or_away == "home",
attacker_name,
defender_name),
away_team = if_else(home_or_away == "home",
defender_name,
attacker_name),
home_code = if_else(home_or_away == "home",
attacker_code,
defender_code),
away_code = if_else(home_or_away == "home",
defender_code,
attacker_code),
home_short_name = if_else(home_or_away == "home",
attacker_short_name,
defender_short_name),
away_short_name = if_else(home_or_away == "home",
defender_short_name,
attacker_short_name),
) |>
select(season_end, round_number, match_number, date_utc, home_team, away_team,
home_or_away, {{score}}, home_code, away_code, home_short_name, away_short_name
)  |>
pivot_wider(names_from = home_or_away,
values_from = {{score}})
}
fixtures_poisson_format <- all_fixtures|>
score_per_row() |>
select(season_end, round_number, match_number, date_utc,
attacker_short_name, defender_short_name, home_or_away, score = value,
attacker_name, defender_name, attacker_code, defender_code)
# Want to separate into past and future - regress on the past, predict the future
fixtures_poisson_past <- fixtures_poisson_format |>
filter(!is.na(score))
fixtures_poisson_future <- fixtures_poisson_format |>
filter(is.na(score))
# Now, create a basic poisson regression model on the past fixtures
# Use short_name for understandability
poisson_model <- poisson_reg()|>
set_engine("glm")
poisson_recipe <- recipe(score ~ attacker_short_name +
defender_short_name +
home_or_away,
data = fixtures_poisson_past)
poisson_workflow <- workflow() %>%
add_recipe(poisson_recipe) %>%
add_model(poisson_model)
poisson_fit <- poisson_workflow |>
fit(data = fixtures_poisson_past)
# This gives a list of coefficients for different scores.
# From this we can identify a league table for how many goals each would be expected to score against each other.
# Score 19% more goals at home - still true 2025
#| label: poisson-weighted
# Choose an arbitrary decay parameter - 0.005 means last week's game has 3% less influence than today's game, last year's game has 16% of the influence.
decay_parameter <- 0.005
# Next version of model - use a weighted iteration.
# Need to include weights
fixtures_poisson_past <- fixtures_poisson_past |>
mutate(days_ago = (today() %--% date_utc)/days(1),
weight = exp(decay_parameter*days_ago))|>
arrange(desc(days_ago))|>
# THIS IS TO ASSIGN SOUTHAMPTON TO SUNDERLAND TO GIVE SUNDERLAND BASE DATA
mutate(
attacker_short_name = recode(attacker_short_name,
"SOU" = "SUN",
.default = attacker_short_name),
defender_short_name = recode(defender_short_name,
"SOU" = "SUN",
.default = defender_short_name),
)
# Now fit a weighted poisson model - this still the same as above
poisson_weighted_recipe <- recipe(score ~ attacker_short_name + defender_short_name + home_or_away,
data = fixtures_poisson_past)
poisson_weighted_model <- poisson_reg() |>
set_engine("glm")
poisson_weighted_workflow <- workflow() |>
add_model(poisson_model)|>
add_recipe(poisson_weighted_recipe)
poisson_weighted_fit <-
fit(poisson_weighted_workflow, data = fixtures_poisson_past)
weighted_fit <- glm(score ~ attacker_short_name +
defender_short_name +
home_or_away,
data = fixtures_poisson_past,
family = "poisson",
weights = weight)
#| label: league-table
# Have everyone play everyone and see total goal difference. Use this to create a team ranking.
# BIG PROBLEM IS THAT THERE'S NO DATA AT ALL FOR SUNDERLAND
# OPTIONS ARE:
### INVENT DUMMY DATA FOR SUNDERLAND
### ASSIGN SUNDERLAND ANOTHER TEAM (E.G. SOUTHAMPTON) IN PAST DATA - DO THIS ONE.
### INCLUDE CHAMPIONSHIP DATA - GET TO THIS EVENTUALLY - COME BACK WITH AN IMPROVEMENT
all_2026_fixtures <- fixtures_poisson_format |>
filter(season_end==2026)|>
select(!score)
predicted_all_fixtures <- all_2026_fixtures |>
bind_cols(predict(weighted_fit, newdata = all_2026_fixtures, type = "response")) |>
rename(.pred = ...12)
offensive_rank <- predicted_all_fixtures|>
group_by(attacker_short_name)|>
rename(short_name = attacker_short_name)|>
summarise(offence_score = sum(.pred) /38)|>
arrange(desc(offence_score))
defensive_rank <- predicted_all_fixtures|>
group_by(defender_short_name)|>
rename(short_name = defender_short_name)|>
summarise(defence_score = sum(.pred) /38)|>
arrange(defence_score)
total_rank <- full_join(offensive_rank, defensive_rank) |>
mutate(advantage_score = offence_score - defence_score)|>
arrange(desc(advantage_score))|>
left_join(name_finder)|>
relocate(team)
total_rank
# next thing is to predict a league table
# Need to have each row be a match
# Want a function that can calculate the win, lose and draw probabilities from two poisson variables
# The skellam functions do this
# Want it to be for the future
predicted_future_fixtures <- fixtures_poisson_future |>
select(!score)|>
bind_cols(predict(weighted_fit, newdata = fixtures_poisson_future, type = "response")) |>
rename(.pred = ...12)
predict_future_rows <- predicted_future_fixtures|>
match_per_row(.pred)|>
mutate(prob_home_win = 1-pskellam(0,home,away),
prob_draw = dskellam(0,home,away),
prob_away_win = pskellam(-1,home,away)
)
# We want to combine the past scores with the predicted rows to create a table
past_rows <- fixtures_poisson_past|>
match_per_row(score) |>
filter(season_end == 2026)|>
mutate(prob_home_win = as.numeric(home > away),
prob_draw = as.numeric(home == away),
prob_away_win = as.numeric(away > home)
)
predict_match_rows <- bind_rows(past_rows, predict_future_rows)
# next format this as a league table
home_record <- summarise(predict_match_rows,
.by = home_short_name,
home_wins = sum(prob_home_win),
home_draws = sum(prob_draw),
home_losses = sum(prob_away_win)
)|>
rename(short_name = home_short_name)
away_record <- summarise(predict_match_rows,
.by = away_short_name,
away_wins = sum(prob_away_win),
away_draws = sum(prob_draw),
away_losses = sum(prob_home_win)
)|>
rename(short_name = away_short_name)
pred_future_table <- left_join(home_record, away_record, by = join_by(short_name))|>
mutate(
wins = home_wins + away_wins,
draws = home_draws + away_draws,
losses = home_losses + away_losses,
points = 3*wins + draws,
.keep = "unused"
)|>
arrange(desc(points))
# Then display this alongside 'now' ranks, as the final summary table
display_table <- left_join(pred_future_table, total_rank, by = join_by(short_name))|>
select(team, short_name, offence_score, defence_score, points, wins, draws, losses) |>
mutate(across(where(is.numeric), ~ format(round(.,1), nsmall = 1)))
display_table
#| label: game_predictions
predict_future_rows <- predict_future_rows|>
mutate(
prob_home_clean_sheet = dpois(0,away),
prob_away_clean_sheet = dpois(0,home)
)
write_csv(predict_future_rows,"processed_data/predict_future_rows.csv")
#| label: set-up
#| include: false
#Set up libraries required in addition to what is in get data
library(tidyverse)
library(tidymodels)
# Import required data
predict_future_rows <- read_csv("processed_data/predict_future_rows.csv")
fpl_elements <- read_csv("processed_data/fpl_elements.csv")
vaastav_2025 <- read_csv("processed_data/vaastav_2025.csv")
team_name_finder <- read_csv("processed_data/name_finder.csv")
champ_players_2025 <- read_csv("processed_data/champ_players_2025.csv")
#| label: player-data
# Lots of data in the fpl_elements tab - for now we need name, ID, element type, team_code, now_cost. Might come back for other data.
player_data <- fpl_elements |>
select(
first_name, second_name, web_name, id,
element_type, team_code, now_cost, minutes_fpl = minutes
) |>
left_join(team_name_finder, join_by(team_code == code))
# Create an exponential back-off summary for goals scored, assists, and minutes in Vaastav data
decay_parameter <- 0.005
player_2025_summary <- vaastav_2025 |>
filter(!is.na(id_2026))|>
mutate(
assists = as.numeric(assists),
minutes_any = as.numeric(minutes>0),
minutes_60_plus = as.numeric(minutes>60),
days_ago = (today() %--% kickoff_time)/days(1),
weight = exp(decay_parameter*days_ago)
)|>
group_by(id_2026)|>
summarise(
minutes_any_weighted = weighted.mean(minutes_any,weight),
minutes_60_weighted = weighted.mean(minutes_60_plus,weight),
goals_weighted = weighted.mean(goals_scored, weight),
assists_weighted = weighted.mean(assists, weight)
)
# Have to come back here to add in 2025-26 gameweeks straight from FPL.
# Now match this to our player dataset
player_data <- player_data|>
left_join(player_2025_summary, join_by(id == id_2026))
# Which players don't have a match? 164 now, out of 663. Let's look by team
player_data |>
filter(is.na(minutes_any_weighted))|>
count(short_name,sort = TRUE)
# Sunderland, Burnley and Leeds have high numbers which is to be expected, but account for less than half of the total. The rest are those with high numbers of transfers, but let's take a closer look and flag those where you would expect a match.
# Is there a new player flag in the dataset? Well not explicit - but past payers have data from the previous season. Best we can do is minutes - won't reveal which players have data which didn't match, but didn't get any minutes. That's kind of fine though!
changed_name <- player_data |>
filter(minutes_fpl>0,
is.na(minutes_any_weighted))|>
mutate(name = str_c(first_name, " ", second_name),.before = 1)
changed_name
# This is the problem list - went back and hard-coded. Possible this will change as transfers happen (e.g. if an Ipswich player joins a PL team). So check again.
# Rest of the players with missing data are new to the PL - we need to create some data for them.
# For newly promoted teams take data from Championship. A few players played more than once. Also some might have the same name... Not worried about players who played in championship and prem - just use prem data - rows_patch will help this.
fpl_champ_players <- champ_players_2025 |>
filter(!is.na(id_2026))|>
mutate(minutes_any_weighted = minutes_any/46,
minutes_60_weighted = minutes_any/46,
goals_weighted = goals/46,
assists_weighted = assists/46)|>
group_by(id_2026)|>
summarise(
minutes_any_weighted = sum(minutes_any_weighted),
minutes_60_weighted = sum(minutes_60_weighted),
goals_weighted = sum(goals_weighted),
assists_weighted = sum(assists_weighted)
)|>
rename(id = id_2026)
player_data <- player_data|>
rows_patch(fpl_champ_players)
# Check again by team:
player_data |>
filter(is.na(minutes_any_weighted)) |>
count(short_name,sort = TRUE)
# Down to 106, Sunderland still very high - have a look through the players if something has gone wrong with names. No - looks like Sunderland just have loads of new players. So done here.
# For incoming players, create dummy data based on team-mates - take the worst player in that position (conservative approach)
worst_player <- player_data |>
group_by(element_type, team_code) |>
summarise(
minutes_any_weighted = min(minutes_any_weighted, na.rm = TRUE),
minutes_60_weighted = min(minutes_60_weighted, na.rm = TRUE),
goals_weighted = min(goals_weighted, na.rm = TRUE),
assists_weighted = min(assists_weighted, na.rm = TRUE)
)
new_player_dummy <- player_data |>
filter(is.na(minutes_any_weighted))|>
select(id, team_code, element_type)|>
left_join(worst_player, join_by(team_code == team_code, element_type == element_type))
player_data <- player_data |>
rows_patch(new_player_dummy)
#| label: player-score-predict
# First step is to work out proportion of goals and assists the player will get for their team:
# Summarise goals and assists per team
goals_per_team <- player_data |>
group_by(team_code)|>
summarise(team_goals = sum(goals_weighted),
team_assists = sum(assists_weighted))
# Look at what proportion are scored by each player
player_data <- player_data |>
left_join(goals_per_team) |>
mutate(prop_goals = goals_weighted/team_goals,
prop_assists = assists_weighted/team_assists)
# Next to look at goals/clean sheets the team will score at upcoming matches, with a decay parameter
# Adjust predict_future_rows to give key info per team each game week.
team_scores_per_week <- predict_future_rows |>
pivot_longer(
cols = c(home, away),
names_to = "home_or_away",
values_to = "goals"
) |>
mutate(
attacker_short_name = if_else(home_or_away == "home",
home_short_name,
away_short_name),
defender_short_name = if_else(home_or_away == "home",
away_short_name,
home_short_name),
prob_clean_sheet = if_else(home_or_away == "home",
prob_home_clean_sheet,
prob_away_clean_sheet)
) |>
select(round_number, match_number, date_utc, home_or_away,
attacker_short_name, defender_short_name, goals, prob_clean_sheet)
future_decay_parameter <- 0.005
goals_against <- team_scores_per_week |>
mutate (
days_from_now = (date_utc %--% today())/days(1),
weight = exp(decay_parameter*days_from_now)
) |>
group_by(defender_short_name)|>
summarise(
weighted_2026_goals_against = sum(goals*weight)
) |>
rename(short_name = defender_short_name)
team_weighted_stats <- team_scores_per_week |>
mutate (
days_from_now = (date_utc %--% today())/days(1),
weight = exp(decay_parameter*days_from_now)
) |>
group_by(attacker_short_name)|>
summarise(
weighted_2026_goals = sum(goals*weight),
weighted_2026_clean_sheets = sum(prob_clean_sheet*weight),
weighted_2026_games = sum(weight)
) |>
rename(short_name = attacker_short_name)|>
left_join(goals_against)
# Come back to this - account for wildcards etc. to have time limits. Is it better in fact to match at a gameweek level - bigger file but more flexibility.
# Finally turn this into estimated points
# Bring together player and team data
player_data <- player_data |>
left_join(team_weighted_stats) |>
mutate(
goals_predict_2026 = prop_goals * weighted_2026_goals,
assists_predict_2026 = prop_assists * weighted_2026_goals,
play_predict_2026 = minutes_any_weighted * weighted_2026_games +
minutes_60_weighted * weighted_2026_games,
goals_against_predict_2026 = minutes_any_weighted * weighted_2026_goals_against,
clean_sheets_predict_2026 = minutes_60_weighted * weighted_2026_clean_sheets
) |>
mutate(
predicted_2026_points = case_when(
element_type == 1 ~ play_predict_2026 + 4*clean_sheets_predict_2026
+ 10*goals_predict_2026 + 3*assists_predict_2026
- 0.5*goals_against_predict_2026,
element_type == 2 ~ play_predict_2026 + 4*clean_sheets_predict_2026
+ 6*goals_predict_2026 + 3*assists_predict_2026
- 0.5*goals_against_predict_2026,
element_type == 3 ~ play_predict_2026 + 1*clean_sheets_predict_2026
+ 5*goals_predict_2026 + 3*assists_predict_2026,
element_type == 4 ~ play_predict_2026
+ 4*goals_predict_2026 + 3*assists_predict_2026
)
)
player_data |>
arrange(desc(predicted_2026_points))
# MUST GO BACK AND FIX GOALS AGAINST BEFORE CONTINUING
# ALSO INJURIES / TRANSFERS
q()
