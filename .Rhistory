names_open_football <- open_football_21_25|>
group_by(home_team)|>
summarise()
names_fixtures <- fixture_data |>
group_by(home_team) |>
summarise()
names_open_football
print(names_open_football, n=30)
names_fixtures
names_open_football_to_fixtures <- function(names_data){
# FC after each one
str_replace_all({{names_data}},
c(" FC" = "",
# AFC before Bournemouth
"AFC " = "",
# & Hove Albion after Brighton
" & Hove Albion" = "",
# Wolves vs Wolverhampton Wanderers
"Wolverhampton Wanderers" = "Wolves",
# City after Leicester
"Leicester City" = "Leicester",
# Spurs vs Tottenham Hotspur
"Tottenham Hotspur" = "Spurs",
# Manchester vs Man
"Manchester" = "Man",
# Utd vs United for Manchester
"Man United" = "Man Utd",
# No United after Newcastle, West Ham, or Leeds
" United" = "",
# Nottingham Forest to Nott'm Forest
"Nottingham" = "Nott'm")
)
}
# Check it works
names_open_football <- names_open_football |>
mutate(home_team = names_open_football_to_fixtures(home_team))
names_open_football
print(names_open_football, 30)
print(names_open_football, n=30)
open_football_21_24 <- open_football_21_24 |>
mutate(home_team = names_open_football_to_fixtures(home_team),
away_team = names_open_football_to_fixtures(away_team)
)
open_football_21_25 <- open_football_21_25 |>
mutate(home_team = names_open_football_to_fixtures(home_team),
away_team = names_open_football_to_fixtures(away_team)
)
name_finder <- fixture_data |>
select(home_team, home_code, home_short_name)|>
group_by(home_team, home_code, home_short_name) |>
summarise()|>
rename(team = home_team,
code = home_code,
short_name = home_short_name)
name_finder
open_football_21_25
open_football_21_25|>filter(season_end = 2025)
open_football_21_25|>filter(season_end == 2025)
name_finder <- fixture_data |>
select(home_team, home_code, home_short_name)|>
group_by(home_team, home_code, home_short_name) |>
summarise()|>
rename(team = home_team,
code = home_code,
short_name = home_short_name)|>
# create dummy codes for those not here - can come back and change if promoted
rbind(tribble(~team, ~code, ~short_name,
"Southampton", 99, "SOU",
"Leicester", 98, "LEI",
"Luton Town", 97, "LUT",
"Norwich City", 96, "NOR",
"Sheffield", 95, "SHU",
"Watford", 94, "WAT",
"Ipswich Town", 93, "IPS"
))
name_finder
open_football_21_25 <- open_football_21_25 |>
left_join(name_finder, by = join_by(home_team == team))|>
rename(home_code = code,
home_short_name = short_name)|>
left_join(name_finder, by = join_by(away_team == team))|>
rename(away_code = code,
away_short_name = short_name)|>
relocate(season_end,.after = away_short_name)
all_fixtures <- rbind(fixture_data, open_football_21_24)
all_fixtures <- rbind(fixture_data, open_football_21_25)
fixture_data
open_football_21_25
fixture_data <- fpl_fixtures |>
select(id, round, kickoff_time, team_a, team_a_score, team_h, team_h_score) |>
left_join(fpl_team_id_home, join_by(team_h == home_id))|>
left_join(fpl_team_id_away, join_by(team_a == away_id))|>
janitor::clean_names()|>
# turn date into a datetime
mutate(date_utc = ymd_hms(kickoff_time))|>
mutate(season_end = 2026)
fpl_fixtures
fixture_data <- fpl_fixtures |>
select(id, event, kickoff_time, team_a, team_a_score, team_h, team_h_score) |>
left_join(fpl_team_id_home, join_by(team_h == home_id))|>
left_join(fpl_team_id_away, join_by(team_a == away_id))|>
janitor::clean_names()|>
# turn date into a datetime
mutate(date_utc = ymd_hms(kickoff_time))|>
mutate(season_end = 2026)
fixture_data
open_football_21_25
fixture_data <- fpl_fixtures |>
select(id, event, kickoff_time, team_a, team_a_score, team_h, team_h_score) |>
left_join(fpl_team_id_home, join_by(team_h == home_id))|>
left_join(fpl_team_id_away, join_by(team_a == away_id))|>
janitor::clean_names()|>
# turn date into a datetime
mutate(date_utc = ymd_hms(kickoff_time), .keep = "unused")|>
mutate(season_end = 2026)
fixture_data
fixture_data <- fpl_fixtures |>
select(id, event, kickoff_time, team_a, team_a_score, team_h, team_h_score) |>
left_join(fpl_team_id_home, join_by(team_h == home_id))|>
left_join(fpl_team_id_away, join_by(team_a == away_id))|>
janitor::clean_names()|>
# turn date into a datetime
mutate(date_utc = ymd_hms(kickoff_time),
match_number = id,
round_number = event,
home_team_score = team_h_score,
away_team_score = team_a_score,
.keep = "unused")|>
mutate(season_end = 2026)
fixture_data
select(!c(team_a, team_h)
fixture_data <- fpl_fixtures |>
fixture_data <- fpl_fixtures |>
fixture_data <- fpl_fixtures |>
fixture_data <- fpl_fixtures |>
left_join(fpl_team_id_home, join_by(team_h == home_id))|>
janitor::clean_names()|>
# turn date into a datetime
mutate(date_utc = ymd_hms(kickoff_time),
round_number = event,
away_team_score = team_a_score,
select(!c(team_a, team_h)
fixture_data <- fpl_fixtures |>
select(id, event, kickoff_time, team_a, team_a_score, team_h, team_h_score) |>
left_join(fpl_team_id_home, join_by(team_h == home_id))|>
left_join(fpl_team_id_away, join_by(team_a == away_id))|>
janitor::clean_names()|>
# turn date into a datetime
mutate(date_utc = ymd_hms(kickoff_time),
match_number = id,
round_number = event,
home_team_score = team_h_score,
away_team_score = team_a_score,
season_end = 2026) |>
select(!c(team_a, team_h))
fixture_data
fixture_data <- fpl_fixtures |>
select(id, event, kickoff_time, team_a, team_a_score, team_h, team_h_score) |>
left_join(fpl_team_id_home, join_by(team_h == home_id))|>
left_join(fpl_team_id_away, join_by(team_a == away_id))|>
janitor::clean_names()|>
# turn date into a datetime
mutate(date_utc = ymd_hms(kickoff_time),
match_number = id,
round_number = event,
home_team_score = team_h_score,
away_team_score = team_a_score,
season_end = 2026,
.keep = "unused") |>
select(!c(team_a, team_h))
fixture_data
all_fixtures <- rbind(fixture_data, open_football_21_25)
all_fixtures
#| label: poisson-simple
# Very simple model says score ~ Poiss(attacker + defender + home/away)
# So actually need to reformat the data again.
# Need each line to be attacker, defender, home/away, score
# create functions to pivot from score per row to match per row and vice versa
score_per_row <- function(data) {
data|> pivot_longer(
cols = c(home_team_score, away_team_score),
names_to = "home_or_away"
)|>
mutate(
attacker_name = if_else(home_or_away == "home_team_score",
home_team,
away_team),
defender_name = if_else(home_or_away == "home_team_score",
away_team,
home_team),
attacker_code = if_else(home_or_away == "home_team_score",
home_code,
away_code),
defender_code = if_else(home_or_away == "home_team_score",
away_code,
home_code),
attacker_short_name = if_else(home_or_away == "home_team_score",
home_short_name,
away_short_name),
defender_short_name = if_else(home_or_away == "home_team_score",
away_short_name,
home_short_name),
home_or_away = if_else(home_or_away == "home_team_score",
"home",
"away")
)
}
match_per_row <- function(data, score){
data |>
mutate(
home_team = if_else(home_or_away == "home",
attacker_name,
defender_name),
away_team = if_else(home_or_away == "home",
defender_name,
attacker_name),
home_code = if_else(home_or_away == "home",
attacker_code,
defender_code),
away_code = if_else(home_or_away == "home",
defender_code,
attacker_code),
home_short_name = if_else(home_or_away == "home",
attacker_short_name,
defender_short_name),
away_short_name = if_else(home_or_away == "home",
defender_short_name,
attacker_short_name),
) |>
select(season_end, round_number, match_number, date_utc, home_team, away_team,
home_or_away, {{score}}, home_code, away_code, home_short_name, away_short_name
)  |>
pivot_wider(names_from = home_or_away,
values_from = {{score}})
}
fixtures_poisson_format <- all_fixtures|>
score_per_row() |>
select(season_end, round_number, match_number, date_utc,
attacker_short_name, defender_short_name, home_or_away, score = value,
attacker_name, defender_name, attacker_code, defender_code)
fixtures_poisson_past <- fixtures_poisson_format |>
filter(!is.na(score))
fixtures_poisson_future <- fixtures_poisson_format |>
filter(is.na(score))
poisson_model <- poisson_reg()|>
set_engine("glm")
poisson_recipe <- recipe(score ~ attacker_short_name +
defender_short_name +
home_or_away,
data = fixtures_poisson_past)
poisson_workflow <- workflow() %>%
add_recipe(poisson_recipe) %>%
add_model(poisson_model)
poisson_fit <- poisson_workflow |>
fit(data = fixtures_poisson_past)
poisson_fit
exp(0.17494)
#| label: poisson-weighted
# Choose an arbitrary decay parameter - 0.005 means last week's game has 3% less influence than today's game, last year's game has 16% of the influence.
decay_parameter <- 0.005
# Next version of model - use a weighted iteration.
# Need to include weights
fixtures_poisson_past <- fixtures_poisson_past |>
mutate(days_ago = (today() %--% date_utc)/days(1),
weight = exp(decay_parameter*days_ago))|>
arrange(desc(days_ago))
poisson_weighted_recipe <- recipe(score ~ attacker_short_name + defender_short_name + home_or_away,
data = fixtures_poisson_past)
poisson_weighted_model <- poisson_reg() |>
set_engine("glm")
poisson_weighted_workflow <- workflow() |>
add_model(poisson_model)|>
add_recipe(poisson_weighted_recipe)
poisson_weighted_fit <-
fit(poisson_weighted_workflow, data = fixtures_poisson_past)
weighted_fit <- glm(score ~ attacker_short_name +
defender_short_name +
home_or_away,
data = fixtures_poisson_past,
family = "poisson",
weights = weight)
#| label: league-table
# Have everyone play everyone and see total goal difference. Use this to create a team ranking.
all_2025_fixtures <- fixtures_poisson_format |>
filter(season_end==2025)|>
select(!score)
predicted_all_fixtures <- all_2025_fixtures |>
bind_cols(predict(weighted_fit, newdata = all_2025_fixtures, type = "response")) |>
rename(.pred = ...12)
offensive_rank <- predicted_all_fixtures|>
group_by(attacker_short_name)|>
rename(short_name = attacker_short_name)|>
summarise(offence_score = sum(.pred) /38)|>
arrange(desc(offence_score))
defensive_rank <- predicted_all_fixtures|>
group_by(defender_short_name)|>
rename(short_name = defender_short_name)|>
summarise(defence_score = sum(.pred) /38)|>
arrange(defence_score)
total_rank <- full_join(offensive_rank, defensive_rank) |>
mutate(advantage_score = offence_score - defence_score)|>
arrange(desc(advantage_score))|>
left_join(name_finder)|>
relocate(team)
total_rank
#| label: league-table
# Have everyone play everyone and see total goal difference. Use this to create a team ranking.
all_2026_fixtures <- fixtures_poisson_format |>
filter(season_end==2026)|>
select(!score)
predicted_all_fixtures <- all_2026_fixtures |>
bind_cols(predict(weighted_fit, newdata = all_2026_fixtures, type = "response")) |>
rename(.pred = ...12)
fixtures_possion_past
fixtures_poisson_past
# Next version of model - use a weighted iteration.
# Need to include weights
fixtures_poisson_past <- fixtures_poisson_past |>
mutate(days_ago = (today() %--% date_utc)/days(1),
weight = exp(decay_parameter*days_ago))|>
arrange(desc(days_ago))|>
mutate(
attacker_short_name = recode(attacker_short_name,
"SUN" = "SOU",
.default = attacker_short_name),
defender_short_name = recode(defender_short_name,
"SUN" = "SOU",
.default = defender_short_name),
)
fixtures_poisson_past
print(fixtures_poisson_past, n=100)
# Next version of model - use a weighted iteration.
# Need to include weights
fixtures_poisson_past <- fixtures_poisson_past |>
mutate(days_ago = (today() %--% date_utc)/days(1),
weight = exp(decay_parameter*days_ago))|>
arrange(desc(days_ago))|>
mutate(
attacker_short_name = recode(attacker_short_name,
"SOU" = "SUN",
.default = attacker_short_name),
defender_short_name = recode(defender_short_name,
"SOU" = "SUN",
.default = defender_short_name),
)
print(fixtures_poisson_past, n=100)
#| label: poisson-weighted
# Choose an arbitrary decay parameter - 0.005 means last week's game has 3% less influence than today's game, last year's game has 16% of the influence.
decay_parameter <- 0.005
# Next version of model - use a weighted iteration.
# Need to include weights
fixtures_poisson_past <- fixtures_poisson_past |>
mutate(days_ago = (today() %--% date_utc)/days(1),
weight = exp(decay_parameter*days_ago))|>
arrange(desc(days_ago))|>
# THIS IS TO ASSIGN SOUTHAMPTON TO SUNDERLAND TO GIVE SUNDERLAND BASE DATA
mutate(
attacker_short_name = recode(attacker_short_name,
"SOU" = "SUN",
.default = attacker_short_name),
defender_short_name = recode(defender_short_name,
"SOU" = "SUN",
.default = defender_short_name),
)
# Now fit a weighted poisson model - this still the same as above
poisson_weighted_recipe <- recipe(score ~ attacker_short_name + defender_short_name + home_or_away,
data = fixtures_poisson_past)
poisson_weighted_model <- poisson_reg() |>
set_engine("glm")
poisson_weighted_workflow <- workflow() |>
add_model(poisson_model)|>
add_recipe(poisson_weighted_recipe)
poisson_weighted_fit <-
fit(poisson_weighted_workflow, data = fixtures_poisson_past)
weighted_fit <- glm(score ~ attacker_short_name +
defender_short_name +
home_or_away,
data = fixtures_poisson_past,
family = "poisson",
weights = weight)
#| label: league-table
# Have everyone play everyone and see total goal difference. Use this to create a team ranking.
# BIG PROBLEM IS THAT THERE'S NO DATA AT ALL FOR SUNDERLAND
# OPTIONS ARE:
### INVENT DUMMY DATA FOR SUNDERLAND
### ASSIGN SUNDERLAND ANOTHER TEAM (E.G. SOUTHAMPTON) IN PAST DATA - DO THIS ONE.
### INCLUDE CHAMPIONSHIP DATA - GET TO THIS EVENTUALLY - COME BACK WITH AN IMPROVEMENT
all_2026_fixtures <- fixtures_poisson_format |>
filter(season_end==2026)|>
select(!score)
predicted_all_fixtures <- all_2026_fixtures |>
bind_cols(predict(weighted_fit, newdata = all_2026_fixtures, type = "response")) |>
rename(.pred = ...12)
offensive_rank <- predicted_all_fixtures|>
group_by(attacker_short_name)|>
rename(short_name = attacker_short_name)|>
summarise(offence_score = sum(.pred) /38)|>
arrange(desc(offence_score))
defensive_rank <- predicted_all_fixtures|>
group_by(defender_short_name)|>
rename(short_name = defender_short_name)|>
summarise(defence_score = sum(.pred) /38)|>
arrange(defence_score)
total_rank <- full_join(offensive_rank, defensive_rank) |>
mutate(advantage_score = offence_score - defence_score)|>
arrange(desc(advantage_score))|>
left_join(name_finder)|>
relocate(team)
total_rank
# Want it to be for the future
predicted_future_fixtures <- fixtures_poisson_future |>
select(!score)|>
bind_cols(predict(weighted_fit, newdata = fixtures_poisson_future, type = "response")) |>
rename(.pred = ...12)
predict_future_rows <- predicted_future_fixtures|>
match_per_row(.pred)|>
mutate(prob_home_win = 1-pskellam(0,home,away),
prob_draw = dskellam(0,home,away),
prob_away_win = pskellam(-1,home,away)
)
past_rows <- fixtures_poisson_past|>
match_per_row(score) |>
filter(season_end == 2025)|>
mutate(prob_home_win = as.numeric(home > away),
prob_draw = as.numeric(home == away),
prob_away_win = as.numeric(away > home)
)
predict_match_rows <- bind_rows(past_rows, predict_future_rows)
home_record <- summarise(predict_match_rows,
.by = home_short_name,
home_wins = sum(prob_home_win),
home_draws = sum(prob_draw),
home_losses = sum(prob_away_win)
)|>
rename(short_name = home_short_name)
away_record <- summarise(predict_match_rows,
.by = away_short_name,
away_wins = sum(prob_away_win),
away_draws = sum(prob_draw),
away_losses = sum(prob_home_win)
)|>
rename(short_name = away_short_name)
pred_future_table <- left_join(home_record, away_record, by = join_by(short_name))|>
mutate(
wins = home_wins + away_wins,
draws = home_draws + away_draws,
losses = home_losses + away_losses,
points = 3*wins + draws,
.keep = "unused"
)|>
arrange(desc(points))
display_table <- left_join(pred_future_table, total_rank, by = join_by(short_name))|>
select(team, short_name, offence_score, defence_score, points, wins, draws, losses) |>
mutate(across(where(is.numeric), ~ format(round(.,1), nsmall = 1)))
display_table
print(display_table, n=22)
# Want it to be for the future
predicted_future_fixtures <- fixtures_poisson_future |>
select(!score)|>
bind_cols(predict(weighted_fit, newdata = fixtures_poisson_future, type = "response")) |>
rename(.pred = ...12)
predict_future_rows <- predicted_future_fixtures|>
match_per_row(.pred)|>
mutate(prob_home_win = 1-pskellam(0,home,away),
prob_draw = dskellam(0,home,away),
prob_away_win = pskellam(-1,home,away)
)
past_rows <- fixtures_poisson_past|>
match_per_row(score) |>
filter(season_end == 2026)|>
mutate(prob_home_win = as.numeric(home > away),
prob_draw = as.numeric(home == away),
prob_away_win = as.numeric(away > home)
)
predict_match_rows <- bind_rows(past_rows, predict_future_rows)
home_record <- summarise(predict_match_rows,
.by = home_short_name,
home_wins = sum(prob_home_win),
home_draws = sum(prob_draw),
home_losses = sum(prob_away_win)
)|>
rename(short_name = home_short_name)
away_record <- summarise(predict_match_rows,
.by = away_short_name,
away_wins = sum(prob_away_win),
away_draws = sum(prob_draw),
away_losses = sum(prob_home_win)
)|>
rename(short_name = away_short_name)
pred_future_table <- left_join(home_record, away_record, by = join_by(short_name))|>
mutate(
wins = home_wins + away_wins,
draws = home_draws + away_draws,
losses = home_losses + away_losses,
points = 3*wins + draws,
.keep = "unused"
)|>
arrange(desc(points))
display_table <- left_join(pred_future_table, total_rank, by = join_by(short_name))|>
select(team, short_name, offence_score, defence_score, points, wins, draws, losses) |>
mutate(across(where(is.numeric), ~ format(round(.,1), nsmall = 1)))
display_table
#| label: game_predictions
#| label: game_predictions
predict_future_rows <- predict_future_rows|>
mutate(
prob_home_clean_sheet = dpois(0,away),
prob_away_clean_sheet = dpois(0,home)
)
write_csv(predict_future_rows,"processed_data/predict_future_rows.csv")
predict_future_rows
q()
