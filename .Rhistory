data|> pivot_longer(
cols = c(home_team_score, away_team_score),
names_to = "home_or_away"
)|>
mutate(
attacker_name = if_else(home_or_away == "home_team_score",
home_team,
away_team),
defender_name = if_else(home_or_away == "home_team_score",
away_team,
home_team),
attacker_code = if_else(home_or_away == "home_team_score",
home_code,
away_code),
defender_code = if_else(home_or_away == "home_team_score",
away_code,
home_code),
attacker_short_name = if_else(home_or_away == "home_team_score",
home_short_name,
away_short_name),
defender_short_name = if_else(home_or_away == "home_team_score",
away_short_name,
home_short_name),
home_or_away = if_else(home_or_away == "home_team_score",
"home",
"away")
)
}
match_per_row <- function(data, score){
data |>
mutate(
home_team = if_else(home_or_away == "home",
attacker_name,
defender_name),
away_team = if_else(home_or_away == "home",
defender_name,
attacker_name),
home_code = if_else(home_or_away == "home",
attacker_code,
defender_code),
away_code = if_else(home_or_away == "home",
defender_code,
attacker_code),
home_short_name = if_else(home_or_away == "home",
attacker_short_name,
defender_short_name),
away_short_name = if_else(home_or_away == "home",
defender_short_name,
attacker_short_name),
) |>
select(season_end, round_number, match_number, date_utc, home_team, away_team,
home_or_away, {{score}}, home_code, away_code, home_short_name, away_short_name
)  |>
pivot_wider(names_from = home_or_away,
values_from = {{score}})
}
fixtures_poisson_format <- all_fixtures|>
score_per_row() |>
select(season_end, round_number, match_number, date_utc,
attacker_short_name, defender_short_name, home_or_away, score = value,
attacker_name, defender_name, attacker_code, defender_code)
# Want to separate into past and future - regress on the past, predict the future
fixtures_poisson_past <- fixtures_poisson_format |>
filter(!is.na(score))
fixtures_poisson_future <- fixtures_poisson_format |>
filter(is.na(score))
# Now, create a basic poisson regression model on the past fixtures
# Use short_name for understandability
poisson_model <- poisson_reg()|>
set_engine("glm")
poisson_recipe <- recipe(score ~ attacker_short_name +
defender_short_name +
home_or_away,
data = fixtures_poisson_past)
poisson_workflow <- workflow() %>%
add_recipe(poisson_recipe) %>%
add_model(poisson_model)
poisson_fit <- poisson_workflow |>
fit(data = fixtures_poisson_past)
# This gives a list of coefficients for different scores.
# From this we can identify a league table for how many goals each would be expected to score against each other.
# Score 19% more goals at home - still true 2025
#| label: poisson-weighted
# Choose an arbitrary decay parameter - 0.005 means last week's game has 3% less influence than today's game, last year's game has 16% of the influence.
decay_parameter <- 0.005
# Next version of model - use a weighted iteration.
# Need to include weights
fixtures_poisson_past <- fixtures_poisson_past |>
mutate(days_ago = (today() %--% date_utc)/days(1),
weight = exp(decay_parameter*days_ago))|>
arrange(desc(days_ago))|>
# THIS IS TO ASSIGN SOUTHAMPTON TO SUNDERLAND TO GIVE SUNDERLAND BASE DATA
mutate(
attacker_short_name = recode(attacker_short_name,
"SOU" = "SUN",
.default = attacker_short_name),
defender_short_name = recode(defender_short_name,
"SOU" = "SUN",
.default = defender_short_name),
)
# Now fit a weighted poisson model - this still the same as above
poisson_weighted_recipe <- recipe(score ~ attacker_short_name + defender_short_name + home_or_away,
data = fixtures_poisson_past)
poisson_weighted_model <- poisson_reg() |>
set_engine("glm")
poisson_weighted_workflow <- workflow() |>
add_model(poisson_model)|>
add_recipe(poisson_weighted_recipe)
poisson_weighted_fit <-
fit(poisson_weighted_workflow, data = fixtures_poisson_past)
weighted_fit <- glm(score ~ attacker_short_name +
defender_short_name +
home_or_away,
data = fixtures_poisson_past,
family = "poisson",
weights = weight)
#| label: league-table
# Have everyone play everyone and see total goal difference. Use this to create a team ranking.
# BIG PROBLEM IS THAT THERE'S NO DATA AT ALL FOR SUNDERLAND
# OPTIONS ARE:
### INVENT DUMMY DATA FOR SUNDERLAND
### ASSIGN SUNDERLAND ANOTHER TEAM (E.G. SOUTHAMPTON) IN PAST DATA - DO THIS ONE.
### INCLUDE CHAMPIONSHIP DATA - GET TO THIS EVENTUALLY - COME BACK WITH AN IMPROVEMENT
all_2026_fixtures <- fixtures_poisson_format |>
filter(season_end==2026)|>
select(!score)
predicted_all_fixtures <- all_2026_fixtures |>
bind_cols(predict(weighted_fit, newdata = all_2026_fixtures, type = "response")) |>
rename(.pred = ...12)
offensive_rank <- predicted_all_fixtures|>
group_by(attacker_short_name)|>
rename(short_name = attacker_short_name)|>
summarise(offence_score = sum(.pred) /38)|>
arrange(desc(offence_score))
defensive_rank <- predicted_all_fixtures|>
group_by(defender_short_name)|>
rename(short_name = defender_short_name)|>
summarise(defence_score = sum(.pred) /38)|>
arrange(defence_score)
total_rank <- full_join(offensive_rank, defensive_rank) |>
mutate(advantage_score = offence_score - defence_score)|>
arrange(desc(advantage_score))|>
left_join(name_finder)|>
relocate(team)
total_rank
# next thing is to predict a league table
# Need to have each row be a match
# Want a function that can calculate the win, lose and draw probabilities from two poisson variables
# The skellam functions do this
# Want it to be for the future
predicted_future_fixtures <- fixtures_poisson_future |>
select(!score)|>
bind_cols(predict(weighted_fit, newdata = fixtures_poisson_future, type = "response")) |>
rename(.pred = ...12)
predict_future_rows <- predicted_future_fixtures|>
match_per_row(.pred)|>
mutate(prob_home_win = 1-pskellam(0,home,away),
prob_draw = dskellam(0,home,away),
prob_away_win = pskellam(-1,home,away)
)
# We want to combine the past scores with the predicted rows to create a table
past_rows <- fixtures_poisson_past|>
match_per_row(score) |>
filter(season_end == 2026)|>
mutate(prob_home_win = as.numeric(home > away),
prob_draw = as.numeric(home == away),
prob_away_win = as.numeric(away > home)
)
predict_match_rows <- bind_rows(past_rows, predict_future_rows)
# next format this as a league table
home_record <- summarise(predict_match_rows,
.by = home_short_name,
home_wins = sum(prob_home_win),
home_draws = sum(prob_draw),
home_losses = sum(prob_away_win)
)|>
rename(short_name = home_short_name)
away_record <- summarise(predict_match_rows,
.by = away_short_name,
away_wins = sum(prob_away_win),
away_draws = sum(prob_draw),
away_losses = sum(prob_home_win)
)|>
rename(short_name = away_short_name)
pred_future_table <- left_join(home_record, away_record, by = join_by(short_name))|>
mutate(
wins = home_wins + away_wins,
draws = home_draws + away_draws,
losses = home_losses + away_losses,
points = 3*wins + draws,
.keep = "unused"
)|>
arrange(desc(points))
# Then display this alongside 'now' ranks, as the final summary table
display_table <- left_join(pred_future_table, total_rank, by = join_by(short_name))|>
select(team, short_name, offence_score, defence_score, points, wins, draws, losses) |>
mutate(across(where(is.numeric), ~ format(round(.,1), nsmall = 1)))
display_table
#| label: game_predictions
predict_future_rows <- predict_future_rows|>
mutate(
prob_home_clean_sheet = dpois(0,away),
prob_away_clean_sheet = dpois(0,home)
)
write_csv(predict_future_rows,"processed_data/predict_future_rows.csv")
#| label: set-up
#| include: false
#Set up libraries required in addition to what is in get data
library(tidyverse)
library(tidymodels)
# Import required data
predict_future_rows <- read_csv("processed_data/predict_future_rows.csv")
fpl_elements <- read_csv("processed_data/fpl_elements.csv")
#| label: player-data
fpl_elements
fpl_elements
predict_future_rows
#| label: player-data
# Lots of data in the fpl_elements tab - for now we need name, ID, element type, team_code, now_cost. Might come back for other data.
player_data <- fpl_elements |>
select(
first_name, second_name, web_name, id, element_type, team_code, now_cost
)
player_data
fb_player_goal_logs(
country         = "ENG",
gender          = "M",
season_end_year = 2025,
tier            = "1"
)
?fb_player_goal_logs
fpl_elements
big_5_2020_results <- fb_match_results(country = c("ENG", "ESP", "ITA", "GER", "FRA"),
gender = "M", season_end_year = 2020, tier = "1st")
big_5_2020_results
"
"
#| label: vaastav-goals-assists-2025
url4 <- "https://raw.githubusercontent.com/vaastav/Fantasy-Premier-League/master/data/2024-25/gws/merged_gw.csv"
vaastav_2025 <- read.csv(url4)
vaastav_2025
vaastav_2025 <- as.tibble(read.csv(url4))
vaastav_2025 <- as_tibble(read.csv(url4))
vaastav_2025 <- tibble(read.csv(url4))
vaastav_2025
vaastav_2025 <- vaastav_2025 |>
select(name, element, gw, kickoff_time, goals, assists, minutes)
vaastav_2025 <- vaastav_2025 |>
select(name, element, GW, kickoff_time, goals, assists, minutes)
vaastav_2025 <- vaastav_2025 |>
select(name, element, GW, kickoff_time, goals_scored, assists, minutes)
vaastav_2025
vaastav_2025 <- vaastav_2025 |>
select(name, element, GW, kickoff_time, goals_scored, assists, minutes)
vaastav_2025 |> sort_by(element)
vaastav_2025 |> arrange(element)
fromJSON("https://fantasy.premierleague.com/api/bootstrap-static/")$elements %>%
as_tibble()
fromJSON("https://fantasy.premierleague.com/api/bootstrap-static/")$elements %>%
as_tibble() |>
relocate(web_name)
fromJSON("https://fantasy.premierleague.com/api/bootstrap-static/")$elements %>%
as_tibble() |>
relocate(web_name) |>
filter(team = 1)
filter(team == 1)
fromJSON("https://fantasy.premierleague.com/api/bootstrap-static/")$elements %>%
as_tibble() |>
fromJSON("https://fantasy.premierleague.com/api/bootstrap-static/")$elements %>%
as_tibble() |>
relocate(web_name) |>
filter(team == 1)
fromJSON("https://fantasy.premierleague.com/api/bootstrap-static/")$elements %>%
+     as_tibble() |>
+ relocate(web_name) |>
+ filter(team == 1)
fromJSON("https://fantasy.premierleague.com/api/bootstrap-static/")$elements %>%
as_tibble() |>
relocate(web_name) |>
filter(team == 1)
fromJSON("https://fantasy.premierleague.com/api/bootstrap-static/")$elements %>%
as_tibble() |>
relocate(web_name) |>
filter(team == 1) |>
print(n=40)
2026_id <- fpl_elements|>
2026_id <- fpl_elements|>
2026_id <- fpl_elements |>
id_2026 <- fpl_elements |>
select(first_name, last_name, id)
id_2026 <- fpl_elements |>
select(first_name, surname, id)
fpl_eleements
fpl_elements
id_2026 <- fpl_elements |>
select(first_name, second_name, id)
id_2026
vaastav_2025 <- tibble(read.csv(url4))
vaastav_2025
vaastav_2025 |>
filter(team == Arsenal)
filter(team == "Arsenal")
vaastav_2025 |>
filter(team == "Arsenal")
vaastav_2025 |>
filter(team == "Arsenal")
vaastav_2025 |>
filter(team == "Arsenal") |>
print (n=40)
id_2026 <- fpl_elements |>
select(first_name, second_name, id) |>
mutate(name = str_c(first_name, " ", second_name) )
id_2026
id_2026 <- fpl_elements |>
select(first_name, second_name, id) |>
mutate(name = str_c(first_name, " ", second_name),
.keep = "unused")
id_2026
vaastav_2025 <- vaastav_2025 |>
select(name, element, GW, kickoff_time, goals_scored, assists, minutes)
vaastav_2025 <- vaastav_2025 |>
select(name, id_2025 = element, GW, kickoff_time, goals_scored, assists, minutes)
vaastav_2025 <- vaastav_2025 |>
left_join(id_2026, join_by(name = name))
vaastav_2025 <- vaastav_2025 |>
left_join(id_2026, join_by(name == name))
vaastav_2025
id_2026 <- fpl_elements |>
select(first_name, second_name, id_2026 = id) |>
mutate(name = str_c(first_name, " ", second_name),
.keep = "unused")
#| label: vaastav-goals-assists-2025
url4 <- "https://raw.githubusercontent.com/vaastav/Fantasy-Premier-League/master/data/2024-25/gws/merged_gw.csv"
vaastav_2025 <- tibble(read.csv(url4))
# Want to have player, gw, assists, goals, element, kickoff_time, minutes
# Can come back to get yellow/red cards, bonus points
vaastav_2025 <- vaastav_2025 |>
select(name, id_2025 = element, GW, kickoff_time, goals_scored, assists, minutes)
# id numbers are different, so need to have a lookup distionary by name
id_2026 <- fpl_elements |>
select(first_name, second_name, id_2026 = id) |>
mutate(name = str_c(first_name, " ", second_name),
.keep = "unused")
vaastav_2025 <- vaastav_2025 |>
left_join(id_2026, join_by(name == name))
vaastav_2025
vaastav_2025 |> filter(is.na(id_2026))
vaastav_2025 |> filter(!is.na(id_2026))
vaastav_2025 |> filter(is.na(id_2026))|>
vaastav_2025 <- vaastav_2025 |>
select(name, id_2025 = element, GW, kickoff_time, goals_scored, assists, minutes, team)
vaastav_2025 <- tibble(read.csv(url4))
vaastav_2025 <- vaastav_2025 |>
select(name, id_2025 = element, GW, kickoff_time, goals_scored, assists, minutes, team)
id_2026 <- fpl_elements |>
select(first_name, second_name, id_2026 = id) |>
mutate(name = str_c(first_name, " ", second_name),
.keep = "unused")
vaastav_2025 <- vaastav_2025 |>
left_join(id_2026, join_by(name == name))
vaastav_2025 |> filter(team == "Tottenham") |> print(n=40)
vaastav_2025 |> filter(team == "Tottenham Hotspur") |> print(n=40)
vaastav_2025 |> filter(team == "Spurs") |> print(n=40)
vaastav_2025 |> filter(team == "Manchester United") |> print(n=40)
vaastav_2025 |> filter(team == "Man United") |> print(n=40)
vaastav_2025 |> filter(team == "Man Utd") |> print(n=40)
vaastav_2025 |> filter(team == "Spurs", is.na(id_2026) |> print(n=100)
vaastav_2025 |> filter(team == "Spurs", is.na(id_2026)) |> print(n=100)
vaastav_2025 |>
group.by(team)|>
summarise(
n_missing    = sum(is.na(id_2026)),
n_not_missing = sum(!is.na(id_2026)),
.groups = "drop"
)|>
mutate(
percent_missing = n_missing / (n_missing + n_not_missing)
)
vaastav_2025 |>
group_by(team)|>
summarise(
n_missing    = sum(is.na(id_2026)),
n_not_missing = sum(!is.na(id_2026)),
.groups = "drop"
)|>
mutate(
percent_missing = n_missing / (n_missing + n_not_missing)
)
vaastav_2025
vaastav_2025 |>
vaastav_2025 |>
group_by(team)|>
summarise(
n_missing    = sum(is.na(id_2026)),
n_not_missing = sum(!is.na(id_2026)),
.groups = "drop"
)|>
mutate(
percent_missing = n_missing / (n_missing + n_not_missing)
) |>
sort_by(n_missing)
vaastav_2025 |>
group_by(team)|>
summarise(
n_missing    = sum(is.na(id_2026)),
n_not_missing = sum(!is.na(id_2026)),
.groups = "drop"
)|>
mutate(
percent_missing = n_missing / (n_missing + n_not_missing)
) |>
arrange(n_missing)
vaastav_2025
vaastav_2025 |>
group_by(team)|>
summarise(
n_missing    = sum(is.na(id_2026)),
n_not_missing = sum(!is.na(id_2026)),
.groups = "drop"
)|>
mutate(
percent_missing = n_missing / (n_missing + n_not_missing)
) |>
arrange(desc(n_missing))
vaastav_2025|> filter(is.numeric(team))
vaastav_2025|> filter(team=="0")
vaastav_2025|> filter(team=="1")
vaastav_2025|> filter(team=="2")
vaastav_2025|> filter(team=="3")
vaastav_2025|> filter(team=="101")
vaastav_2025 <- tibble(read.csv(url4))
vaastav_2025|> filter(team=="101")
vaastav_2025 |>
group_by(team)|>
summarise(
n_missing    = sum(is.na(id_2026)),
n_not_missing = sum(!is.na(id_2026)),
.groups = "drop"
)|>
mutate(
percent_missing = n_missing / (n_missing + n_not_missing)
) |>
arrange(desc(n_missing))
#| label: vaastav-goals-assists-2025
url4 <- "https://raw.githubusercontent.com/vaastav/Fantasy-Premier-League/master/data/2024-25/gws/merged_gw.csv"
vaastav_2025 <- tibble(read.csv(url4))
# Want to have player, gw, assists, goals, element, kickoff_time, minutes
# Can come back to get yellow/red cards, bonus points
vaastav_2025 <- vaastav_2025 |>
select(name, id_2025 = element, GW, kickoff_time, goals_scored, assists, minutes, team)
# id numbers are different, so need to have a lookup distionary by name
id_2026 <- fpl_elements |>
select(first_name, second_name, id_2026 = id) |>
mutate(name = str_c(first_name, " ", second_name),
.keep = "unused")
vaastav_2025 <- vaastav_2025 |>
left_join(id_2026, join_by(name == name))
# Only about 1/3 of players have matches by name. Looking at Spurs it makes sense, apart from Pedro Porro. United also makes sense
# Check numbers by team
vaastav_2025 |>
group_by(team)|>
summarise(
n_missing    = sum(is.na(id_2026)),
n_not_missing = sum(!is.na(id_2026)),
.groups = "drop"
)|>
mutate(
percent_missing = n_missing / (n_missing + n_not_missing)
) |>
arrange(desc(n_missing))
vaastav_2025`
vaastav_2025
vaastav_2025
id_2026
id_2026 |>
filter(name == "Pedro Porro")
filter(name == "Pedro Porro de Silva")
id_2026 |>
filter(name == "Pedro Porro de Silva")
id_2026 |> filter(str_detect(name, "Pedro")
)
write_csv(vaastav_2025,"processed_data/vaastav_2025.csv")
#| label: vaastav-goals-assists-2025
url4 <- "https://raw.githubusercontent.com/vaastav/Fantasy-Premier-League/master/data/2024-25/gws/merged_gw.csv"
vaastav_2025 <- tibble(read.csv(url4))
# Want to have player, gw, assists, goals, element, kickoff_time, minutes
# Can come back to get yellow/red cards, bonus points
vaastav_2025 <- vaastav_2025 |>
select(name, id_2025 = element, GW, kickoff_time, goals_scored, assists, minutes, team)
# id numbers are different, so need to have a lookup distionary by name
id_2026 <- fpl_elements |>
select(first_name, second_name, id_2026 = id) |>
mutate(name = str_c(first_name, " ", second_name),
.keep = "unused")
vaastav_2025 <- vaastav_2025 |>
left_join(id_2026, join_by(name == name))
# Only about 1/3 of players have matches by name. Looking at Spurs it makes sense, apart from Pedro Porro. United also makes sense
# Check numbers by team
vaastav_2025 |>
group_by(team)|>
summarise(
n_missing    = sum(is.na(id_2026)),
n_not_missing = sum(!is.na(id_2026)),
.groups = "drop"
)|>
mutate(
percent_missing = n_missing / (n_missing + n_not_missing)
) |>
arrange(desc(n_missing))
# Looks like Vaastav has loads of artefacts that sit in the data - for the teams the percentage missing looks right, so I think we're all good. Need to watch for people like Pedro Porro that have changed names and come back to it.
write_csv(vaastav_2025,"processed_data/vaastav_2025.csv")
q()
