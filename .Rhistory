rename(short_name = attacker_short_name)|>
summarise(offence_score = sum(.pred))|>
arrange(desc(offence_score))
defensive_rank <- predicted_all_fixtures|>
group_by(defender_short_name)|>
rename(short_name = defender_short_name)|>
summarise(defence_score = sum(.pred))|>
arrange(defence_score)
total_rank <- full_join(offensive_rank, defensive_rank, by) |>
mutate(advantage_score = offence_score - defence_score)|>
arrange(desc(advantage_score))
total_rank <- full_join(offensive_rank, defensive_rank) |>
mutate(advantage_score = offence_score - defence_score)|>
arrange(desc(advantage_score))
total_rank
offensive_rank <- predicted_all_fixtures|>
group_by(attacker_short_name)|>
rename(short_name = attacker_short_name)|>
summarise(offence_score = sum(.pred) /38)|>
arrange(desc(offence_score))
defensive_rank <- predicted_all_fixtures|>
group_by(defender_short_name)|>
rename(short_name = defender_short_name)|>
summarise(defence_score = sum(.pred) /38)|>
arrange(defence_score)
total_rank <- full_join(offensive_rank, defensive_rank) |>
mutate(advantage_score = offence_score - defence_score)|>
arrange(desc(advantage_score))
total_rank
name_finder
total_rank <- full_join(offensive_rank, defensive_rank) |>
mutate(advantage_score = offence_score - defence_score)|>
arrange(desc(advantage_score))|>
left_join(name_finder)|>
relocate(team)
total_rank
q()
#| label: set-up
#| include: false
#Set up libraries required
library(httr)
library(jsonlite)
library(tidyverse)
#| label: fpl-api
url <- "https://fantasy.premierleague.com/api/bootstrap-static/"
response <- GET(url)
fpl_data <- fromJSON(content(response, "text"))
#| label: split-fpl-data
# Chips - gives chips with names, quantity, start and end, and chip types
# Data structure is almost normal, but lots associated with the assistant manager chip is not.
# Add assistant manager to the list of things to work out later.
fpl_chips <- tibble(fpl_data$chips)
# Events - gives details of each game week.
# Key columns appear to be the deadline, whether the week has passed, is current, or is next,
# and details of which players have been most chosen or transferred in.
fpl_events <- tibble(fpl_data$events)
# Game_settings - a list containing the parameters for the game.
# Can capture as might be helpful to reference these if things change in different seasons (e.g. squad value)
fpl_game_settings <- fpl_data$game_settings
# Game_config - a further list with some additional rules (broken into other lists).
# Contains useful parameters like the number of points for different events
fpl_game_config <- fpl_data$game_config
# Phases - the different phases that scores get summarised on, with their start and end weeks
# Whole season plus months.
fpl_phases <- tibble(fpl_data$phases)
# Teams - lists teams with a unique code, whether they have played this week, and some indications of their overall strength.
fpl_teams <- tibble(fpl_data$teams)
fpl_teams |> write_csv("processed_data/fpl_teams.csv")
# Total_players - how many players are currently in the game - updates in real time.
fpl_total_players <- fpl_data$total_players
# Element_stats - a list of the different stats that players have associated with them.
# Each has a display name and a data column name
fpl_element_stats <- tibble(fpl_data$element_stats)
# Element_types - a list of the 4 different player types, plus managers, and their attributes.
fpl_element_types <- tibble(fpl_data$element_types)
# Elements - the big table of players - have as a tibble. Over 100 variables about each player. This will be the key source of data.
fpl_elements <- tibble(fpl_data$elements)
fpl_elements |> write_csv("processed_data/fpl_elements.csv")
#| label: openfootball-api
url2 <- "https://raw.githubusercontent.com/openfootball/football.json/refs/heads/master/2024-25/en.1.json"
response2 <-GET(url2)
open_football_data <- fromJSON(content(response2,"text"))
open_football_data_2 <- open_football_data$matches |>
unnest_wider(score, names_sep = "_")|>
unnest_wider(score_ht, names_sep = "_")|>
unnest_wider(score_ht_1, names_sep = "_")|>
unnest_wider(score_ft, names_sep = "_")|>
unnest_wider(score_ft_1, names_sep = "_")
# Also get data from the earlier years
open_football_year <- function(url) {
response <- GET(url)
open_football_data <- fromJSON(content(response,"text"))
open_football_data <- open_football_data$matches |>
unnest_wider(score, names_sep = "_")|>
unnest_wider(score_ht, names_sep = "_")|>
unnest_wider(score_ht_1, names_sep = "_")|>
unnest_wider(score_ft, names_sep = "_")|>
unnest_wider(score_ft_1, names_sep = "_")
open_football_data
}
open_football_2023_24 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2023-24/en.1.json")
open_football_2022_23 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2022-23/en.1.json")
open_football_2021_22 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2021-22/en.1.json")
open_football_21_24 <- rbind(
open_football_2021_22 |> mutate(
match_number = row_number(date),
season_end = 2022),
open_football_2022_23 |> mutate(
match_number = row_number(date),
season_end = 2023),
open_football_2023_24 |> mutate(
match_number = row_number(date),
season_end = 2024)
)
open_football_21_24 |> write_csv("processed_data/open_football_21_24.csv")
# and also championship data for information on promoted teams
open_football_championship_2024_25 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2024-25/en.2.json")
open_football_championship_2023_24 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2023-24/en.2.json")
open_football_championship_2022_23 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2022-23/en.2.json")|>
select(!c(score_et,score_p))
open_football_championship_2021_22 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2021-22/en.2.json")|>
select(!c(score_et,score_p))
open_football_champ_21_25 <- rbind(
open_football_championship_2021_22 |> mutate(
match_number = row_number(date),
season_end = 2022),
open_football_championship_2022_23 |> mutate(
match_number = row_number(date),
season_end = 2023),
open_football_championship_2023_24 |> mutate(
match_number = row_number(date),
season_end = 2024),
open_football_championship_2024_25 |> mutate(
match_number = row_number(date),
season_end = 2025)
)
open_football_champ_21_25 |> write_csv("processed_data/open_football_champ_21_25.csv")
#| label: fixture-download-feed
url3 <- "https://fixturedownload.com/feed/json/epl-2024"
response3 <- GET(url3)
fixture_download_data <- tibble(fromJSON(content(response3, "text")))
write_csv(fixture_download_data,"processed_data/fixture_download_data.csv")
#| label: set-up
#| include: false
#Set up libraries required in addition to what is in get data
library(tidyverse)
library(tidymodels)
library(poissonreg)
# Load datasets needed
fpl_teams <- read_csv("processed_data/fpl_teams.csv")
open_football_21_24 <- read_csv("processed_data/open_football_21_24.csv")
fixture_download_data <- read_csv("processed_data/fixture_download_data.csv")
#| label: team-fixtures
# Want to have team names and numbers from fpl_teams
# id changes season to season, but code is consistent through seasons. the elements file has both. Also want full name and short name
# Need it twice to join both home and away
fpl_team_id_home <- fpl_teams |>
select(home_code = code,
HomeTeam = name,
home_short_name = short_name)
fpl_team_id_away <- fpl_teams |>
select(away_code = code,
AwayTeam = name,
away_short_name = short_name)
# Join these names with fixture_down_load data for this season's fixtures by the HomeTeam and AwayTeam names.
fixture_data <- fixture_download_data |>
left_join(fpl_team_id_home)|>
left_join(fpl_team_id_away)|>
select(!c(Location,Group)) |>
janitor::clean_names()|>
# turn date into a datetime
mutate(date_utc = ymd_hms(date_utc))|>
mutate(season_end = 2025)
# next - consider the open_football data - just premier league here.
# We want to get the data in the same format as fixture_data
open_football_21_24 <- open_football_21_24|>
select(match_number,
round_number = round,
date,
time,
home_team = team1,
away_team = team2,
home_team_score = score_ft_1_1,
away_team_score = score_ft_1_2,
season_end
) |>
# turn date and time into date time
mutate(date_utc = ymd_hms(str_c(date," ",time)),
.keep = "unused",
.after = round_number)|>
# turn round_number into a number
mutate(round_number = as.numeric(str_extract(round_number,"\\d+")))
# next we need to change the names of the teams - using a lookup table?
names_open_football <- open_football_21_24|>
group_by(home_team)|>
summarise()
names_fixtures <- fixture_data |>
group_by(home_team) |>
summarise()
# Create a function to change things.
names_open_football_to_fixtures <- function(names_data){
# FC after each one
str_replace_all({{names_data}},
c(" FC" = "",
# AFC before Bournemouth
"AFC " = "",
# & Hove Albion after Brighton
" & Hove Albion" = "",
# Wolves vs Wolverhampton Wanderers
"Wolverhampton Wanderers" = "Wolves",
# City after Leicester
"Leicester City" = "Leicester",
# Spurs vs Tottenham Hotspur
"Tottenham Hotspur" = "Spurs",
# Manchester vs Man
"Manchester" = "Man",
# Utd vs United for Manchester
"Man United" = "Man Utd",
# No United after Newcastle or West Ham
" United" = "",
# Nottingham Forest to Nott'm Forest
"Nottingham" = "Nott'm")
)
}
# Check it works
names_open_football <- names_open_football |>
mutate(home_team = names_open_football_to_fixtures(home_team))
# It does, apply to the main open_football dataset
open_football_21_24 <- open_football_21_24 |>
mutate(home_team = names_open_football_to_fixtures(home_team),
away_team = names_open_football_to_fixtures(away_team)
)
# Then add short names and codes
name_finder <- fixture_data |>
select(home_team, home_code, home_short_name)|>
group_by(home_team, home_code, home_short_name) |>
summarise()|>
rename(team = home_team,
code = home_code,
short_name = home_short_name)|>
# create dummy codes for those not here - can come back and change if promoted
rbind(tribble(~team, ~code, ~short_name,
"Burnley", 99, "BUR",
"Leeds", 98, "LEE",
"Luton Town", 97, "LUT",
"Norwich City", 96, "NOR",
"Sheffield", 95, "SHU",
"Watford", 94, "WAT",
))
open_football_21_24 <- open_football_21_24 |>
left_join(name_finder, by = join_by(home_team == team))|>
rename(home_code = code,
home_short_name = short_name)|>
left_join(name_finder, by = join_by(away_team == team))|>
rename(away_code = code,
away_short_name = short_name)|>
relocate(season_end,.after = away_short_name)
# Now should all be the same, can we rbind?
all_fixtures <- rbind(fixture_data, open_football_21_24)
all_fixtures
#| label: poisson-simple
# Very simple model says score ~ Poiss(attacker + defender + home/away)
# So actually need to reformat the data again.
# Need each line to be attacker, defender, home/away, score
fixtures_poisson_format <- all_fixtures|>
pivot_longer(
cols = c(home_team_score, away_team_score),
names_to = "home_or_away"
)|>
mutate(
attacker_name = if_else(home_or_away == "home_team_score",
home_team,
away_team),
defender_name = if_else(home_or_away == "home_team_score",
away_team,
home_team),
attacker_code = if_else(home_or_away == "home_team_score",
home_code,
away_code),
defender_code = if_else(home_or_away == "home_team_score",
away_code,
home_code),
attacker_short_name = if_else(home_or_away == "home_team_score",
home_short_name,
away_short_name),
defender_short_name = if_else(home_or_away == "home_team_score",
away_short_name,
home_short_name),
home_or_away = if_else(home_or_away == "home_team_score",
"home",
"away")
) |>
select(season_end, round_number, match_number, date_utc,
attacker_short_name, defender_short_name, home_or_away, score = value,
attacker_name, defender_name, attacker_code, defender_code)
# Want to separate into past and future - regress on the past, predict the future
fixtures_poisson_past <- fixtures_poisson_format |>
filter(!is.na(score))
fixtures_poisson_future <- fixtures_poisson_format |>
filter(is.na(score))
# Now, create a basic poisson regression model on the past fixtures
# Use short_name for understandability
poisson_model <- poisson_reg()|>
set_engine("glm")
poisson_fit <- poisson_model |>
fit(score ~ attacker_short_name + defender_short_name + home_or_away,
data = fixtures_poisson_past)
# This gives a list of coefficients for different scores.
# From this we can identify a league table for how many goals each would be expected to score against each other.
# Score 19% more goals at home
#| label: league-table
# Have everyone play everyone and see total goal difference. Use this to create a team ranking.
all_2025_fixtures <- fixtures_poisson_format |>
filter(season_end==2025)|>
select(!score)
predicted_all_fixtures <- all_2025_fixtures |>
bind_cols(predict(poisson_fit, new_data = all_2025_fixtures))
offensive_rank <- predicted_all_fixtures|>
group_by(attacker_short_name)|>
rename(short_name = attacker_short_name)|>
summarise(offence_score = sum(.pred) /38)|>
arrange(desc(offence_score))
defensive_rank <- predicted_all_fixtures|>
group_by(defender_short_name)|>
rename(short_name = defender_short_name)|>
summarise(defence_score = sum(.pred) /38)|>
arrange(defence_score)
total_rank <- full_join(offensive_rank, defensive_rank) |>
mutate(advantage_score = offence_score - defence_score)|>
arrange(desc(advantage_score))|>
left_join(name_finder)|>
relocate(team)
total_rank
# next thing is to predict a league table
?pivot_wider
predicted_all_fixtures |>
pivot_wider(
names_from = home_or_away,
values_from = score
)
fixtures_poission_format |>
pivot_wider(
names_from = home_or_away,
values_from = score
)
fixtures_poisson_format |>
pivot_wider(
names_from = home_or_away,
values_from = score
)
#| label: poisson-simple
# Very simple model says score ~ Poiss(attacker + defender + home/away)
# So actually need to reformat the data again.
# Need each line to be attacker, defender, home/away, score
score_per_row <- function(data) {
data|> pivot_longer(
cols = c(home_team_score, away_team_score),
names_to = "home_or_away"
)|>
mutate(
attacker_name = if_else(home_or_away == "home_team_score",
home_team,
away_team),
defender_name = if_else(home_or_away == "home_team_score",
away_team,
home_team),
attacker_code = if_else(home_or_away == "home_team_score",
home_code,
away_code),
defender_code = if_else(home_or_away == "home_team_score",
away_code,
home_code),
attacker_short_name = if_else(home_or_away == "home_team_score",
home_short_name,
away_short_name),
defender_short_name = if_else(home_or_away == "home_team_score",
away_short_name,
home_short_name),
home_or_away = if_else(home_or_away == "home_team_score",
"home",
"away")
)
}
fixtures_poisson_format <- all_fixtures|>
score_per_row() |>
select(season_end, round_number, match_number, date_utc,
attacker_short_name, defender_short_name, home_or_away, score = value,
attacker_name, defender_name, attacker_code, defender_code)
fixtures_poisson_format
match_per_row <- function(data){
data |>
mutate(
home_team = if_else(home_or_away == "home",
attacker_name,
defender_name),
away_team = if_else(home_or_away == "home",
defender_name,
attacker_name),
home_code = if_else(home_or_away == "home",
attacker_code,
defender_code),
away_code = if_else(home_or_away == "home",
defender_code,
attacker_code),
home_short_name = if_else(home_or_away == "home",
attacker_short_name,
defender_short_name),
away_short_name = if_else(home_or_away == "home",
defender_short_name,
attacker_short_name),
)|>
pivot_wider(names_from = home_or_away,
values_from = score
)
}
all_fixtures
predicted_all_fixtures
predicted_all_fixtures|>
match_per_row()
match_per_row <- function(data, score){
data |>
mutate(
home_team = if_else(home_or_away == "home",
attacker_name,
defender_name),
away_team = if_else(home_or_away == "home",
defender_name,
attacker_name),
home_code = if_else(home_or_away == "home",
attacker_code,
defender_code),
away_code = if_else(home_or_away == "home",
defender_code,
attacker_code),
home_short_name = if_else(home_or_away == "home",
attacker_short_name,
defender_short_name),
away_short_name = if_else(home_or_away == "home",
defender_short_name,
attacker_short_name),
)|>
pivot_wider(names_from = home_or_away,
values_from = {{score}}
)
}
predicted_all_fixtures
predicted_all_fixtures|>
match_per_row(.pred)
match_per_row <- function(data, score){
data |>
mutate(
home_team = if_else(home_or_away == "home",
attacker_name,
defender_name),
away_team = if_else(home_or_away == "home",
defender_name,
attacker_name),
home_code = if_else(home_or_away == "home",
attacker_code,
defender_code),
away_code = if_else(home_or_away == "home",
defender_code,
attacker_code),
home_short_name = if_else(home_or_away == "home",
attacker_short_name,
defender_short_name),
away_short_name = if_else(home_or_away == "home",
defender_short_name,
attacker_short_name),
)|>
pivot_wider(names_from = home_or_away,
values_from = {{score}}
) |>
select(season_end, round_number, match_number, date_utc, home_team, away_team,
home, away, home_code, away_code, home_short_name, away_short_name)
}
predicted_all_fixtures|>
match_per_row(.pred)
match_per_row <- function(data, score){
data |>
mutate(
home_team = if_else(home_or_away == "home",
attacker_name,
defender_name),
away_team = if_else(home_or_away == "home",
defender_name,
attacker_name),
home_code = if_else(home_or_away == "home",
attacker_code,
defender_code),
away_code = if_else(home_or_away == "home",
defender_code,
attacker_code),
home_short_name = if_else(home_or_away == "home",
attacker_short_name,
defender_short_name),
away_short_name = if_else(home_or_away == "home",
defender_short_name,
attacker_short_name),
) |>
select(season_end, round_number, match_number, date_utc, home_team, away_team,
home_or_away, {{score}}, home_code, away_code, home_short_name, away_short_name
)  |>
pivot_wider(names_from = home_or_away,
values_from = {{score}})
}
predicted_all_fixtures|>
match_per_row(.pred)
predict_match_rows <- predicted_all_fixtures|>
match_per_row(.pred)
install.packages(skellam)
q()
