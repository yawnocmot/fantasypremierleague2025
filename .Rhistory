summarise()
names_fixtures <- fixture_data |>
group_by(home_team) |>
summarise()
# Create a function to change things.
names_open_football_to_fixtures <- function(names_data){
# FC after each one
str_replace_all({{names_data}},
c(" FC" = "",
# AFC before Bournemouth
"AFC " = "",
# & Hove Albion after Brighton
" & Hove Albion" = "",
# Wolves vs Wolverhampton Wanderers
"Wolverhampton Wanderers" = "Wolves",
# City after Leicester
"Leicester City" = "Leicester",
# Spurs vs Tottenham Hotspur
"Tottenham Hotspur" = "Spurs",
# Manchester vs Man
"Manchester" = "Man",
# Utd vs United for Manchester
"Man United" = "Man Utd",
# No United after Newcastle, West Ham, or Leeds
" United" = "",
# Nottingham Forest to Nott'm Forest
"Nottingham" = "Nott'm")
)
}
# Check it works
names_open_football <- names_open_football |>
mutate(home_team = names_open_football_to_fixtures(home_team))
# It does, apply to the main open_football dataset
open_football_21_25 <- open_football_21_25 |>
mutate(home_team = names_open_football_to_fixtures(home_team),
away_team = names_open_football_to_fixtures(away_team)
)
# Then add short names and codes
name_finder <- fixture_data |>
select(home_team, home_code, home_short_name)|>
group_by(home_team, home_code, home_short_name) |>
summarise()|>
rename(team = home_team,
code = home_code,
short_name = home_short_name)|>
# create dummy codes for those not here - can come back and change if promoted
rbind(tribble(~team, ~code, ~short_name,
"Southampton", 99, "SOU",
"Leicester", 98, "LEI",
"Luton Town", 97, "LUT",
"Norwich City", 96, "NOR",
"Sheffield", 95, "SHU",
"Watford", 92, "WAT", # Note Brentford has 94
"Ipswich Town", 93, "IPS"
))
write_csv(name_finder, "processed_data/name_finder.csv")
open_football_21_25 <- open_football_21_25 |>
left_join(name_finder, by = join_by(home_team == team))|>
rename(home_code = code,
home_short_name = short_name)|>
left_join(name_finder, by = join_by(away_team == team))|>
rename(away_code = code,
away_short_name = short_name)|>
relocate(season_end,.after = away_short_name)
# Now should all be the same, can we rbind?
all_fixtures <- rbind(fixture_data, open_football_21_25)
all_fixtures
#| label: poisson-simple
# Very simple model says score ~ Poiss(attacker + defender + home/away)
# So actually need to reformat the data again.
# Need each line to be attacker, defender, home/away, score
# create functions to pivot from score per row to match per row and vice versa
score_per_row <- function(data) {
data|> pivot_longer(
cols = c(home_team_score, away_team_score),
names_to = "home_or_away"
)|>
mutate(
attacker_name = if_else(home_or_away == "home_team_score",
home_team,
away_team),
defender_name = if_else(home_or_away == "home_team_score",
away_team,
home_team),
attacker_code = if_else(home_or_away == "home_team_score",
home_code,
away_code),
defender_code = if_else(home_or_away == "home_team_score",
away_code,
home_code),
attacker_short_name = if_else(home_or_away == "home_team_score",
home_short_name,
away_short_name),
defender_short_name = if_else(home_or_away == "home_team_score",
away_short_name,
home_short_name),
home_or_away = if_else(home_or_away == "home_team_score",
"home",
"away")
)
}
match_per_row <- function(data, score){
data |>
mutate(
home_team = if_else(home_or_away == "home",
attacker_name,
defender_name),
away_team = if_else(home_or_away == "home",
defender_name,
attacker_name),
home_code = if_else(home_or_away == "home",
attacker_code,
defender_code),
away_code = if_else(home_or_away == "home",
defender_code,
attacker_code),
home_short_name = if_else(home_or_away == "home",
attacker_short_name,
defender_short_name),
away_short_name = if_else(home_or_away == "home",
defender_short_name,
attacker_short_name),
) |>
select(season_end, round_number, match_number, date_utc, home_team, away_team,
home_or_away, {{score}}, home_code, away_code, home_short_name, away_short_name
)  |>
pivot_wider(names_from = home_or_away,
values_from = {{score}})
}
fixtures_poisson_format <- all_fixtures|>
score_per_row() |>
select(season_end, round_number, match_number, date_utc,
attacker_short_name, defender_short_name, home_or_away, score = value,
attacker_name, defender_name, attacker_code, defender_code)
# Want to separate into past and future - regress on the past, predict the future
fixtures_poisson_past <- fixtures_poisson_format |>
filter(!is.na(score))
fixtures_poisson_future <- fixtures_poisson_format |>
filter(is.na(score))
# Now, create a basic poisson regression model on the past fixtures
# Use short_name for understandability
poisson_model <- poisson_reg()|>
set_engine("glm")
poisson_recipe <- recipe(score ~ attacker_short_name +
defender_short_name +
home_or_away,
data = fixtures_poisson_past)
poisson_workflow <- workflow() %>%
add_recipe(poisson_recipe) %>%
add_model(poisson_model)
poisson_fit <- poisson_workflow |>
fit(data = fixtures_poisson_past)
# This gives a list of coefficients for different scores.
# From this we can identify a league table for how many goals each would be expected to score against each other.
# Score 19% more goals at home - still true 2025
#| label: poisson-weighted
# Choose an arbitrary decay parameter - 0.005 means last week's game has 3% less influence than today's game, last year's game has 16% of the influence.
decay_parameter <- 0.005
# Next version of model - use a weighted iteration.
# Need to include weights
fixtures_poisson_past <- fixtures_poisson_past |>
mutate(days_ago = (today() %--% date_utc)/days(1),
weight = exp(decay_parameter*days_ago))|>
arrange(desc(days_ago))|>
# THIS IS TO ASSIGN SOUTHAMPTON TO SUNDERLAND TO GIVE SUNDERLAND BASE DATA
mutate(
attacker_short_name = recode(attacker_short_name,
"SOU" = "SUN",
.default = attacker_short_name),
defender_short_name = recode(defender_short_name,
"SOU" = "SUN",
.default = defender_short_name),
)
# Now fit a weighted poisson model - this still the same as above
poisson_weighted_recipe <- recipe(score ~ attacker_short_name + defender_short_name + home_or_away,
data = fixtures_poisson_past)
poisson_weighted_model <- poisson_reg() |>
set_engine("glm")
poisson_weighted_workflow <- workflow() |>
add_model(poisson_model)|>
add_recipe(poisson_weighted_recipe)
poisson_weighted_fit <-
fit(poisson_weighted_workflow, data = fixtures_poisson_past)
weighted_fit <- glm(score ~ attacker_short_name +
defender_short_name +
home_or_away,
data = fixtures_poisson_past,
family = "poisson",
weights = weight)
#| label: league-table
# Have everyone play everyone and see total goal difference. Use this to create a team ranking.
# BIG PROBLEM IS THAT THERE'S NO DATA AT ALL FOR SUNDERLAND
# OPTIONS ARE:
### INVENT DUMMY DATA FOR SUNDERLAND
### ASSIGN SUNDERLAND ANOTHER TEAM (E.G. SOUTHAMPTON) IN PAST DATA - DO THIS ONE.
### INCLUDE CHAMPIONSHIP DATA - GET TO THIS EVENTUALLY - COME BACK WITH AN IMPROVEMENT
all_2026_fixtures <- fixtures_poisson_format |>
filter(season_end==2026)|>
select(!score)
predicted_all_fixtures <- all_2026_fixtures |>
bind_cols(predict(weighted_fit, newdata = all_2026_fixtures, type = "response")) |>
rename(.pred = ...12)
offensive_rank <- predicted_all_fixtures|>
group_by(attacker_short_name)|>
rename(short_name = attacker_short_name)|>
summarise(offence_score = sum(.pred) /38)|>
arrange(desc(offence_score))
defensive_rank <- predicted_all_fixtures|>
group_by(defender_short_name)|>
rename(short_name = defender_short_name)|>
summarise(defence_score = sum(.pred) /38)|>
arrange(defence_score)
total_rank <- full_join(offensive_rank, defensive_rank) |>
mutate(advantage_score = offence_score - defence_score)|>
arrange(desc(advantage_score))|>
left_join(name_finder)|>
relocate(team)
total_rank
# next thing is to predict a league table
# Need to have each row be a match
# Want a function that can calculate the win, lose and draw probabilities from two poisson variables
# The skellam functions do this
# Want it to be for the future
predicted_future_fixtures <- fixtures_poisson_future |>
select(!score)|>
bind_cols(predict(weighted_fit, newdata = fixtures_poisson_future, type = "response")) |>
rename(.pred = ...12)
predict_future_rows <- predicted_future_fixtures|>
match_per_row(.pred)|>
mutate(prob_home_win = 1-pskellam(0,home,away),
prob_draw = dskellam(0,home,away),
prob_away_win = pskellam(-1,home,away)
)
# We want to combine the past scores with the predicted rows to create a table
past_rows <- fixtures_poisson_past|>
match_per_row(score) |>
filter(season_end == 2026)|>
mutate(prob_home_win = as.numeric(home > away),
prob_draw = as.numeric(home == away),
prob_away_win = as.numeric(away > home)
)
predict_match_rows <- bind_rows(past_rows, predict_future_rows)
# next format this as a league table
home_record <- summarise(predict_match_rows,
.by = home_short_name,
home_wins = sum(prob_home_win),
home_draws = sum(prob_draw),
home_losses = sum(prob_away_win)
)|>
rename(short_name = home_short_name)
away_record <- summarise(predict_match_rows,
.by = away_short_name,
away_wins = sum(prob_away_win),
away_draws = sum(prob_draw),
away_losses = sum(prob_home_win)
)|>
rename(short_name = away_short_name)
pred_future_table <- left_join(home_record, away_record, by = join_by(short_name))|>
mutate(
wins = home_wins + away_wins,
draws = home_draws + away_draws,
losses = home_losses + away_losses,
points = 3*wins + draws,
.keep = "unused"
)|>
arrange(desc(points))
# Then display this alongside 'now' ranks, as the final summary table
display_table <- left_join(pred_future_table, total_rank, by = join_by(short_name))|>
select(team, short_name, offence_score, defence_score, points, wins, draws, losses) |>
mutate(across(where(is.numeric), ~ format(round(.,1), nsmall = 1)))
display_table
#| label: game_predictions
predict_future_rows <- predict_future_rows|>
mutate(
prob_home_clean_sheet = dpois(0,away),
prob_away_clean_sheet = dpois(0,home)
)
write_csv(predict_future_rows,"processed_data/predict_future_rows.csv")
#| label: set-up
#| include: false
#Set up libraries required in addition to what is in get data
library(tidyverse)
library(tidymodels)
# Import required data
predict_future_rows <- read_csv("processed_data/predict_future_rows.csv")
fpl_elements <- read_csv("processed_data/fpl_elements.csv")
vaastav_2025 <- read_csv("processed_data/vaastav_2025.csv")
team_name_finder <- read_csv("processed_data/name_finder.csv")
#| label: player-data
# Lots of data in the fpl_elements tab - for now we need name, ID, element type, team_code, now_cost. Might come back for other data.
player_data <- fpl_elements |>
select(
first_name, second_name, web_name, id,
element_type, team_code, now_cost, minutes_fpl = minutes
) |>
left_join(team_name_finder, join_by(team_code == code))
# Create an exponential back-off summary for goals scored, assists, and minutes in Vaastav data
decay_parameter <- 0.005
player_2025_summary <- vaastav_2025 |>
filter(!is.na(id_2026))|>
mutate(
assists = as.numeric(assists),
minutes_any = as.numeric(minutes>0),
minutes_60_plus = as.numeric(minutes>60),
days_ago = (today() %--% kickoff_time)/days(1),
weight = exp(decay_parameter*days_ago)
)|>
group_by(id_2026)|>
summarise(
minutes_any_weighted = weighted.mean(minutes_any,weight),
minutes_60_weighted = weighted.mean(minutes_60_plus,weight),
goals_weighted = weighted.mean(goals_scored, weight),
assists_weighted = weighted.mean(assists, weight)
)
# Now match this to our player dataset
player_data <- player_data|>
left_join(player_2025_summary, join_by(id == id_2026))
# Which players don't have a match? 164 now, out of 663. Let's look by team
player_data |>
filter(is.na(minutes_any_weighted))|>
count(short_name,sort = TRUE)
# Sunderland, Burnley and Leeds have high numbers which is to be expected, but account for less than half of the total. The rest are those with high numbers of transfers, but let's take a closer look and flag those where you would expect a match.
# Is there a new player flag in the dataset? Well not explicit - but past payers have data from the previous season. Best we can do is minutes - won't reveal which players have data which didn't match, but didn't get any minutes. That's kind of fine though!
changed_name <- player_data |>
filter(minutes_fpl>0,
is.na(minutes_any_weighted))|>
mutate(name = str_c(first_name, " ", second_name),.before = 1)
changed_name
# This is the problem list - went back and hard-coded. Possible this will change as transfers happen (e.g. if an Ipswich player joins a PL team). So check again.
# Rest of the players with missing data are new to the PL - we need to create some data for them.
# For newly promoted teams take data from Championship
# For incoming players, create dummy data based on team-mates - take the worst player in that position (conservative approach)
player_data
champ_players_2025 <- champ_players_2025 |>
left_join(id_2026, join_by ( name == name))
# Pull out just what you need and rename for clarity.
champ_players_2025 <- champ_stats_24_25 %>%
transmute(
name        = Player,
team        = Squad,
minutes_any = `MP_Playing Time`,    # matches played
minutes_60  = `Starts_Playing Time`,   # use as proxy for playing over 60 mins
goals       = Gls,   # goals scored
assists     = Ast    # assists
)
champ_players_2025 <- champ_players_2025 |>
left_join(id_2026, join_by ( name == name))
champ_players_2025
print(champ_players_2025)
#| label: fbref-championship
# Fetch the standard stats for every player in the 2024–25 Championship
champ_stats_24_25 <- fb_league_stats(
country          = "ENG",       # England
gender           = "M",         # Men’s competition
season_end_year  = 2025,        # season = 2024/25
tier             = "2nd",       # Championship is the 2nd tier
stat_type        = "standard",  # basic stats: apps, mins, goals, assists, etc.
team_or_player   = "player",    # we want per‑player, not per‑team
time_pause       = 3            # polite pause between FBref requests
)|>
as_tibble()
#| label: fbref-championship
# Fetch the standard stats for every player in the 2024–25 Championship
champ_stats_24_25 <- fb_league_stats(
country          = "ENG",       # England
gender           = "M",         # Men’s competition
season_end_year  = 2025,        # season = 2024/25
tier             = "2nd",       # Championship is the 2nd tier
stat_type        = "standard",  # basic stats: apps, mins, goals, assists, etc.
team_or_player   = "player",    # we want per‑player, not per‑team
time_pause       = 3            # polite pause between FBref requests
)|>
as_tibble()
# Pull out just what you need and rename for clarity.
champ_players_2025 <- champ_stats_24_25 |>
transmute(
name        = Player,
team        = Squad,
minutes_any = `MP_Playing Time`,    # matches played
minutes_60  = `Starts_Playing Time`,   # use as proxy for playing over 60 mins
goals       = Gls,   # goals scored
assists     = Ast    # assists
)
champ_players_2025 <- champ_players_2025 |>
left_join(id_2026, join_by ( name == name))
champ_players_2025
champ_players_2025 |>
filter(team %in% c("Leeds United","Sunderland", "Burnley"))
write_csv(champ_players_2025,"processed_data/champ_players_2025.csv")
champ_players_2025 <- read_csv("processed_data/champ_players_2025.csv")
champ_players_2025
# Understand what total weight is for comparison
total_weight <- player_2025_summary |>
group_by(id_2026)|>
summarise(weight = sum(weight))
# Understand what total weight is for comparison
total_weight <- player_2025_summary |>
group_by(id_2026)|>
summarise(weight = weighted.mean(1,weight))
# Understand what total weight is for comparison
total_weight <- player_2025_summary |>
group_by(id_2026)|>
summarise(weight = weighted.mean("1",weight))
# Understand what total weight is for comparison
total_weight <- player_2025_summary |>
group_by(id_2026)|>
summarise(weight = weighted.mean(1, weight))
# Understand what total weight is for comparison
total_weight <- player_2025_summary |>
group_by(id_2026)|>
summarise(weight = weighted.mean(+1, weight))
# Understand what total weight is for comparison
total_weight <- player_2025_summary |>
group_by(id_2026)|>
mutate(one = 1)|>
summarise(weight = weighted.mean(one, weight))
# Understand what total weight is for comparison
total_weight <- player_2025_summary |>
group_by(id_2026)|>
mutate(one = 1)
total_weight
champ_players_2025
champ_players_2025
champ_players_2025 |>
filter(!is.na(id_2026))|>
mutate(minutes_any_weighted = minutes_any/46,
minutes_60_weighted = minutes_any/46,
goals_weighted = goals/46,
assists_weighted = assists/46)
champ_players_2025 |>
filter(!is.na(id_2026))|>
mutate(minutes_any_weighted = minutes_any/46,
minutes_60_weighted = minutes_any/46,
goals_weighted = goals/46,
assists_weighted = assists/46)|>
group_by(id_2026)|>
summarise(
minutes_any_weighted = sum(minutes_any_weighted),
minutes_60_weighted = sum(minutes_60_weighted),
goals_weighted = sum(goals_weighted),
assists_weighted = sum(assists_weighted)
)
player_data <- player_data|>
patch(fpl_champ_players,id_2026)
player_data <- player_data|>
rows_patch(fpl_champ_players,id_2026)
fpl_champ_players <- champ_players_2025 |>
filter(!is.na(id_2026))|>
mutate(minutes_any_weighted = minutes_any/46,
minutes_60_weighted = minutes_any/46,
goals_weighted = goals/46,
assists_weighted = assists/46)|>
group_by(id_2026)|>
summarise(
minutes_any_weighted = sum(minutes_any_weighted),
minutes_60_weighted = sum(minutes_60_weighted),
goals_weighted = sum(goals_weighted),
assists_weighted = sum(assists_weighted)
)
player_data <- player_data|>
rows_patch(fpl_champ_players,id_2026)
rows_patch(fpl_champ_players,join_by(id_2026==id_2026)
player_data <- player_data|>
rows_patch(fpl_champ_players,join_by(id_2026==id_2026))
player_data <- player_data|>
rows_patch(fpl_champ_players,id_2026==id_2026)
player_data <- player_data|>
rows_patch(fpl_champ_players)
player_data
fpl_champ_players <- champ_players_2025 |>
filter(!is.na(id_2026))|>
mutate(minutes_any_weighted = minutes_any/46,
minutes_60_weighted = minutes_any/46,
goals_weighted = goals/46,
assists_weighted = assists/46)|>
group_by(id_2026)|>
summarise(
minutes_any_weighted = sum(minutes_any_weighted),
minutes_60_weighted = sum(minutes_60_weighted),
goals_weighted = sum(goals_weighted),
assists_weighted = sum(assists_weighted)
)|>
rename(id = id_2026)
player_data <- player_data|>
rows_patch(fpl_champ_players)
player_data
# Check again by team:
player_data |>
filter(is.na(minutes_any_weighted))|>
count(short_name,sort = TRUE)
# Check again by team:
player_data |>
filter(is.na(minutes_any_weighted))
fpl_elements
fpl_elements|> names()
champ_players_2025
champ_players_2025 <- champ_players_2025 |>
left_join(id_2026, join_by ( name == name))
champ_players_2025 |> filter(team == "Sunderland")
champ_players_2025 |> filter(team == "Sunderland")|> print(n=50)
champ_players_2025 |> filter(name == "Niall Huggins")
# Check again by team:
player_data |>
filter(is.na(minutes_any_weighted)) |>
count(short_name,sort = TRUE)
# Check again by team:
player_data |>
# filter(is.na(minutes_any_weighted)) |>
count(short_name,sort = TRUE)
# Check again by team:
player_data |>
filter(is.na(minutes_any_weighted)) #|>
