#    2021–22 → 2022, …, 2025–26 → 2026
past_seasons <- 2022:2025
future_season <- 2026
# 4. Fetch all fixtures & results for those seasons
epl_fixtures_results <- load_match_results(
country          = "ENG",
gender           = "M",
season_end_year  = past_seasons,
tier             = "1st"
) %>%
select(
Season_End_Year,   # the season (end year)
Date,              # match date
Home, Away,        # teams
HomeGoals, AwayGoals, # final scores
MatchURL           # FBref URL for joining
)|>  # :contentReference[oaicite:1]{index=1}
as.tibble()
# 5. Fetch the detailed “match summary” timeline (goals, cards, subs)
epl_match_summaries <- load_fb_match_summary(
country          = "ENG",
gender           = "M",
tier             = "1st",
season_end_year  = past_seasons
)  # includes columns event_time, event_type, event_players, score_progression :contentReference[oaicite:2]{index=2}
# 5. Fetch the detailed “match summary” timeline (goals, cards, subs)
epl_match_summaries <- load_fb_match_summary(
country          = "ENG",
gender           = "M",
tier             = "1st",
season_end_year  = 2025
)  # includes columns event_time, event_type, event_players, score_progression :contentReference[oaicite:2]{index=2}
# 5. Fetch the detailed “match summary” timeline (goals, cards, subs)
epl_match_summaries <- load_fb_match_summary(
country          = "ENG",
gender           = "M",
tier             = "1st",
season_end_year  = 2022
)  # includes columns event_time, event_type, event_players, score_progression :contentReference[oaicite:2]{index=2}
try({
load_fb_match_summary(
country = "ENG",
gender = "M",
tier = "1st"
)
load_fb_match_summary(
country = c("ITA", "ESP"),
gender = "M",
tier = "1st",
season_end_year = 2019
)
})
load_fb_match_summary(
country = "ENG",
gender = "M",
tier = "1st",
season_end_year = 2019
)
# MATCH SUMMARY DATA DOESN'T INCLUDE EPL - HAVE TO TRY ANOTHER WAY
# 5. Fetch the detailed “match summary” timeline (goals, cards, subs)
epl_match_summaries <- load_fb_match_summary(
country          = "ENG",
gender           = "M",
tier             = "2nd",
season_end_year  = 2022
)  # includes columns event_time, event_type, event_players, score_progression :contentReference[oaicite:2]{index=2}
epl_match_summaries
jwp_url <- "https://fbref.com/en/players/3515d404/James-Ward-Prowse"
goal_log <- fb_player_goal_logs(jwp_url, goals_or_assists="both")
dplyr::glimpse(goal_log)
#| label: set-up
#| include: false
#Set up libraries required
library(httr)
library(jsonlite)
library(tidyverse)
library(worldfootballR)
#| label: fpl-api
url <- "https://fantasy.premierleague.com/api/bootstrap-static/"
response <- GET(url)
fpl_data <- fromJSON(content(response, "text"))
#| label: split-fpl-data
# Chips - gives chips with names, quantity, start and end, and chip types
# Data structure is almost normal, but lots associated with the assistant manager chip is not.
# Add assistant manager to the list of things to work out later.
fpl_chips <- tibble(fpl_data$chips)
# Events - gives details of each game week.
# Key columns appear to be the deadline, whether the week has passed, is current, or is next,
# and details of which players have been most chosen or transferred in.
fpl_events <- tibble(fpl_data$events)
# Game_settings - a list containing the parameters for the game.
# Can capture as might be helpful to reference these if things change in different seasons (e.g. squad value)
fpl_game_settings <- fpl_data$game_settings
# Game_config - a further list with some additional rules (broken into other lists).
# Contains useful parameters like the number of points for different events
fpl_game_config <- fpl_data$game_config
# Phases - the different phases that scores get summarised on, with their start and end weeks
# Whole season plus months.
fpl_phases <- tibble(fpl_data$phases)
# Teams - lists teams with a unique code, whether they have played this week, and some indications of their overall strength.
fpl_teams <- tibble(fpl_data$teams)
fpl_teams |> write_csv("processed_data/fpl_teams.csv")
# Total_players - how many players are currently in the game - updates in real time.
fpl_total_players <- fpl_data$total_players
# Element_stats - a list of the different stats that players have associated with them.
# Each has a display name and a data column name
fpl_element_stats <- tibble(fpl_data$element_stats)
# Element_types - a list of the 4 different player types, plus managers, and their attributes.
fpl_element_types <- tibble(fpl_data$element_types)
# Elements - the big table of players - have as a tibble. Over 100 variables about each player. This will be the key source of data.
fpl_elements <- tibble(fpl_data$elements)
fpl_elements |> write_csv("processed_data/fpl_elements.csv")
#| label: openfootball-api
url2 <- "https://raw.githubusercontent.com/openfootball/football.json/refs/heads/master/2024-25/en.1.json"
response2 <-GET(url2)
open_football_data <- fromJSON(content(response2,"text"))
open_football_data_2 <- open_football_data$matches |>
unnest_wider(score, names_sep = "_")|>
unnest_wider(score_ht, names_sep = "_")|>
unnest_wider(score_ht_1, names_sep = "_")|>
unnest_wider(score_ft, names_sep = "_")|>
unnest_wider(score_ft_1, names_sep = "_")
# Also get data from the earlier years
open_football_year <- function(url) {
response <- GET(url)
open_football_data <- fromJSON(content(response,"text"))
open_football_data <- open_football_data$matches |>
unnest_wider(score, names_sep = "_")|>
unnest_wider(score_ht, names_sep = "_")|>
unnest_wider(score_ht_1, names_sep = "_")|>
unnest_wider(score_ft, names_sep = "_")|>
unnest_wider(score_ft_1, names_sep = "_")
open_football_data
}
open_football_2023_24 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2023-24/en.1.json")
open_football_2022_23 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2022-23/en.1.json")
open_football_2021_22 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2021-22/en.1.json")
open_football_21_24 <- rbind(
open_football_2021_22 |> mutate(
match_number = row_number(date),
season_end = 2022),
open_football_2022_23 |> mutate(
match_number = row_number(date),
season_end = 2023),
open_football_2023_24 |> mutate(
match_number = row_number(date),
season_end = 2024)
)
open_football_21_24 |> write_csv("processed_data/open_football_21_24.csv")
# and also championship data for information on promoted teams
open_football_championship_2024_25 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2024-25/en.2.json")
open_football_championship_2023_24 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2023-24/en.2.json")
open_football_championship_2022_23 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2022-23/en.2.json")|>
select(!c(score_et,score_p))
open_football_championship_2021_22 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2021-22/en.2.json")|>
select(!c(score_et,score_p))
open_football_champ_21_25 <- rbind(
open_football_championship_2021_22 |> mutate(
match_number = row_number(date),
season_end = 2022)|>
select(-stage),
open_football_championship_2022_23 |> mutate(
match_number = row_number(date),
season_end = 2023)|>
select(-stage),
open_football_championship_2023_24 |> mutate(
match_number = row_number(date),
season_end = 2024)|>
select(-stage),
open_football_championship_2024_25 |> mutate(
match_number = row_number(date),
season_end = 2025)|>
select(-score_et)
)
open_football_champ_21_25 |> write_csv("processed_data/open_football_champ_21_25.csv")
#| label: fixture-download-feed
url3 <- "https://fixturedownload.com/feed/json/epl-2024"
response3 <- GET(url3)
fixture_download_data <- tibble(fromJSON(content(response3, "text")))
write_csv(fixture_download_data,"processed_data/fixture_download_data.csv")
# 3. Define the seasons by their end‑year:
#    2021–22 → 2022, …, 2025–26 → 2026
past_seasons <- 2022:2025
future_season <- 2026
# 4. Fetch all fixtures & results for those seasons
epl_fixtures_results <- load_match_results(
country          = "ENG",
gender           = "M",
season_end_year  = past_seasons,
tier             = "1st"
) %>%
select(
Season_End_Year,   # the season (end year)
Date,              # match date
Home, Away,        # teams
HomeGoals, AwayGoals, # final scores
MatchURL           # FBref URL for joining
)|>  # :contentReference[oaicite:1]{index=1}
as.tibble()
# MATCH SUMMARY DATA DOESN'T INCLUDE EPL - HAVE TO TRY ANOTHER WAY
#
#
#
# 5. Fetch the detailed “match summary” timeline (goals, cards, subs)
epl_match_summaries <- load_fb_match_summary(
country          = "ENG",
gender           = "M",
tier             = "1st",
season_end_year  = 2022
)  # includes columns event_time, event_type, event_players, score_progression :contentReference[oaicite:2]{index=2}
# 6. Filter out just the goal events
goal_events <- epl_match_summaries %>%
filter(event_type == "Goal") %>%       # keep only goals :contentReference[oaicite:3]{index=3}
select(
Season_End_Year, Date, Home, Away,   # context
event_time,                          # minute of goal
event_players,                       # scorer (and assist) text
score_progression,                   # e.g. “1–0”, “2–1”
MatchURL
)
## 1) Fixtures & results (one row per match)
fixtures <- load_match_results(
country         = "ENG",
gender          = "M",
season_end_year = past_seasons,
tier            = "1st"
) %>%
select(Season_End_Year, Date, Home, Away, HomeGoals, AwayGoals, MatchURL)
## 2) Goal-by-goal data (one row per goal)
goals <- fb_player_goal_logs(
country         = "ENG",
gender          = "M",
season_end_year = past_seasons,
tier            = "1"
)
?fb_player_goal_logs
fb_match_results("ENG","M",2024)
man_city_url <- "https://fbref.com/en/squads/b8fd03ef/Manchester-City-Stats"
goal_log <- function(team_urls = man_city_url, for_or_against="both")
dplyr::glimpse(goal_log)
goal_log
man_city_url <- "https://fbref.com/en/squads/b8fd03ef/Manchester-City-Stats"
goal_log <- fb_team_goal_logs(team_urls = man_city_url, for_or_against="both")
fb_team_goal_logs(man_city_url)
?fb_team_goal_logs
man_city_url <- "https://fbref.com/en/squads/b8fd03ef/Manchester-City-Stats"
fb_team_goal_logs(team_urls = man_city_url, for_or_against = "for")
big5_player_shooting <- fb_big5_advanced_season_stats(season_end_year= c(2019:2021), stat_type= "shooting", team_or_player= "player")
dplyr::glimpse(big5_player_shooting)
# And the future fixtures
worldfootball_2026_fixtures <- load_match_results(
country          = "ENG",
gender           = "M",
season_end_year  = future_season,
tier             = "1st"
) %>%
select(
Season_End_Year,   # the season (end year)
Date,              # match date
Home, Away,        # teams
HomeGoals, AwayGoals, # final scores
MatchURL           # FBref URL for joining
)|>
as.tibble()
worldfootball_2026_fixtures
fpl_events
fpl_teams
fx_raw   <- fromJSON("https://fantasy.premierleague.com/api/fixtures/")
fx_raw
fpl_fixtures <- tibble(fromJSON("https://fantasy.premierleague.com/api/fixtures/"))
fpl_fixtures
fpl_fixtures |> write_csv("processed_data/fpl_fixtures.csv")
#| label: set-up
#| include: false
#Set up libraries required in addition to what is in get data
library(tidyverse)
library(tidymodels)
library(poissonreg)
library(skellam)
# Load datasets needed
fpl_teams <- read_csv("processed_data/fpl_teams.csv")
open_football_21_24 <- read_csv("processed_data/open_football_21_25.csv")
open_football_2023_24 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2024-25/en.1.json")
open_football_2024-25 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2024-25/en.1.json")
open_football_2023_24 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2023-24/en.1.json")
open_football_2024-25 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2024-25/en.1.json")
#| label: openfootball-api
url2 <- "https://raw.githubusercontent.com/openfootball/football.json/refs/heads/master/2024-25/en.1.json"
response2 <-GET(url2)
open_football_data <- fromJSON(content(response2,"text"))
open_football_data_2 <- open_football_data$matches |>
unnest_wider(score, names_sep = "_")|>
unnest_wider(score_ht, names_sep = "_")|>
unnest_wider(score_ht_1, names_sep = "_")|>
unnest_wider(score_ft, names_sep = "_")|>
unnest_wider(score_ft_1, names_sep = "_")
# Also get data from the earlier years
open_football_year <- function(url) {
response <- GET(url)
open_football_data <- fromJSON(content(response,"text"))
open_football_data <- open_football_data$matches |>
unnest_wider(score, names_sep = "_")|>
unnest_wider(score_ht, names_sep = "_")|>
unnest_wider(score_ht_1, names_sep = "_")|>
unnest_wider(score_ft, names_sep = "_")|>
unnest_wider(score_ft_1, names_sep = "_")
open_football_data
}
open_football_2023_24 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2023-24/en.1.json")
open_football_2022_23 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2022-23/en.1.json")
open_football_2021_22 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2021-22/en.1.json")
open_football_21_24 <- rbind(
open_football_2021_22 |> mutate(
match_number = row_number(date),
season_end = 2022),
open_football_2022_23 |> mutate(
match_number = row_number(date),
season_end = 2023),
open_football_2023_24 |> mutate(
match_number = row_number(date),
season_end = 2024)
)
open_football_21_24 |> write_csv("processed_data/open_football_21_24.csv")
# and also championship data for information on promoted teams
open_football_championship_2024_25 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2024-25/en.2.json")
open_football_championship_2023_24 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2023-24/en.2.json")
open_football_championship_2022_23 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2022-23/en.2.json")|>
select(!c(score_et,score_p))
open_football_championship_2021_22 <- open_football_year("https://github.com/openfootball/football.json/raw/refs/heads/master/2021-22/en.2.json")|>
select(!c(score_et,score_p))
open_football_champ_21_25 <- rbind(
open_football_championship_2021_22 |> mutate(
match_number = row_number(date),
season_end = 2022)|>
select(-stage),
open_football_championship_2022_23 |> mutate(
match_number = row_number(date),
season_end = 2023)|>
select(-stage),
open_football_championship_2023_24 |> mutate(
match_number = row_number(date),
season_end = 2024)|>
select(-stage),
open_football_championship_2024_25 |> mutate(
match_number = row_number(date),
season_end = 2025)|>
select(-score_et)
)
open_football_champ_21_25 |> write_csv("processed_data/open_football_champ_21_25.csv")
open_football_data_2
open_football_2023_24
open_football_21_24 <- rbind(
open_football_2021_22 |> mutate(
match_number = row_number(date),
season_end = 2022),
open_football_2022_23 |> mutate(
match_number = row_number(date),
season_end = 2023),
open_football_2023_24 |> mutate(
match_number = row_number(date),
season_end = 2024),
open_football_data_2 |> mutate(
match_number = row_number(date),
season_end = 2025)
)
open_football_21_25 <- rbind(
open_football_2021_22 |> mutate(
match_number = row_number(date),
season_end = 2022),
open_football_2022_23 |> mutate(
match_number = row_number(date),
season_end = 2023),
open_football_2023_24 |> mutate(
match_number = row_number(date),
season_end = 2024),
open_football_data_2 |> mutate(
match_number = row_number(date),
season_end = 2025)
)
open_football_21_25 |> write_csv("processed_data/open_football_21_25.csv")
#| label: set-up
#| include: false
#Set up libraries required in addition to what is in get data
library(tidyverse)
library(tidymodels)
library(poissonreg)
library(skellam)
# Load datasets needed
fpl_teams <- read_csv("processed_data/fpl_teams.csv")
open_football_21_25 <- read_csv("processed_data/open_football_21_25.csv")
fixture_download_data <- read_csv("processed_data/fixture_download_data.csv")
fpl_fixtures <- read_csv("processed_data/fpl_teams.csv")
#| label: team-fixtures
# Want to have team names and numbers from fpl_teams
# id changes season to season, but code is consistent through seasons. the elements file has both. Also want full name and short name
# Need it twice to join both home and away
fpl_team_id_home <- fpl_teams |>
select(home_code = code,
HomeTeam = name,
home_short_name = short_name)
fpl_team_id_away <- fpl_teams |>
select(away_code = code,
AwayTeam = name,
away_short_name = short_name)
fixture_data <- fpl_fixtures |>
left_join(fpl_team_id_home)|>
left_join(fpl_team_id_away)|>
select(!c(Location,Group)) |>
janitor::clean_names()|>
# turn date into a datetime
mutate(date_utc = ymd_hms(date_utc))|>
mutate(season_end = 2025)
fpl_fixtures
fpl_fixtures <- read_csv("processed_data/fpl_fixtures.csv")
fixture_data <- fpl_fixtures |>
left_join(fpl_team_id_home)|>
left_join(fpl_team_id_away)|>
select(!c(Location,Group)) |>
janitor::clean_names()|>
# turn date into a datetime
mutate(date_utc = ymd_hms(date_utc))|>
mutate(season_end = 2025)
fpl_fixtures
fpl_fixtures |>
select(team_a, team_h)
fpl_team_id_home
fpl_teams
#| label: team-fixtures
# Want to have team names and numbers from fpl_teams
# id changes season to season, but code is consistent through seasons. the elements file has both. Also want full name and short name
# Need it twice to join both home and away
fpl_team_id_home <- fpl_teams |>
select(home_code = code,
home_id = id,
home_team = name,
home_short_name = short_name)
fpl_team_id_away <- fpl_teams |>
select(away_code = code,
away_id = id,
away_team = name,
away_short_name = short_name)
?left_join
fixture_data <- fpl_fixtures |>
left_join(fpl_team_id_home, join_by(team_h == home_id))|>
left_join(fpl_team_id_away, join_by(team_a == away_id))|>
select(!c(Location,Group)) |>
janitor::clean_names()|>
# turn date into a datetime
mutate(date_utc = ymd_hms(date_utc))|>
mutate(season_end = 2025)
fixture_data <- fpl_fixtures |>
left_join(fpl_team_id_home, join_by(team_h == home_id))|>
left_join(fpl_team_id_away, join_by(team_a == away_id))|>
janitor::clean_names()|>
# turn date into a datetime
mutate(date_utc = ymd_hms(date_utc))|>
mutate(season_end = 2025)
fixture_data <- fpl_fixtures |>
left_join(fpl_team_id_home, join_by(team_h == home_id))|>
left_join(fpl_team_id_away, join_by(team_a == away_id))|>
janitor::clean_names()
fixture_data
fixture_data <- fpl_fixtures |>
select(id, kickoff_time, finished, team_a, team_a_score, team_h, team_h_score, stats) |>
left_join(fpl_team_id_home, join_by(team_h == home_id))|>
left_join(fpl_team_id_away, join_by(team_a == away_id))|>
janitor::clean_names()
fixture_data
fixture_data <- fpl_fixtures |>
select(id, kickoff_time, finished, team_a, team_a_score, team_h, team_h_score, stats) |>
left_join(fpl_team_id_home, join_by(team_h == home_id))|>
left_join(fpl_team_id_away, join_by(team_a == away_id))|>
janitor::clean_names()|>
# turn date into a datetime
mutate(kickoff_time = ymd_hms(date_utc))|>
mutate(season_end = 2026)
fixture_data <- fpl_fixtures |>
select(id, kickoff_time, finished, team_a, team_a_score, team_h, team_h_score, stats) |>
left_join(fpl_team_id_home, join_by(team_h == home_id))|>
left_join(fpl_team_id_away, join_by(team_a == away_id))|>
janitor::clean_names()|>
# turn date into a datetime
mutate(kickoff_time = ymd_hms(kickoff_time))|>
mutate(season_end = 2026)
open_football_21_25 <- open_football_21_25|>
select(match_number,
round_number = round,
date,
time,
home_team = team1,
away_team = team2,
home_team_score = score_ft_1_1,
away_team_score = score_ft_1_2,
season_end
) |>
# turn date and time into date time
mutate(date_utc = ymd_hms(str_c(date," ",time)),
.keep = "unused",
.after = round_number)|>
# turn round_number into a number
mutate(round_number = as.numeric(str_extract(round_number,"\\d+")))
names_open_football <- open_football_21_25|>
group_by(home_team)|>
summarise()
names_fixtures <- fixture_data |>
group_by(home_team) |>
summarise()
q()
R.version.string
pkgs <- installed.packages()[, "Package"]
saveRDS(pkgs, "my_packages.rds")
q()
