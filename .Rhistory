X <- df |>
mutate(
.value    = !!sym(score_col),
.cost     = !!sym(cost_col),
.category = !!sym(category_col),
.id       = !!sym(id_col),
.lambda   = lambdas[.category]
)
pick_with_alpha <- function(alpha) {
cand <- X %>%
mutate(
.key = .value - (alpha * .lambda) * .cost,
.tiebreak = .value / pmax(.cost, 1e-9)
) %>%
arrange(.category, desc(.key), desc(.tiebreak), desc(.value), .cost)
chosen <- cand %>%
mutate(
.target = case_when(
.category == "GK" ~ 2,
.category == "DEF" ~ 5,
.category == "MID" ~ 5,
.category == "FWD" ~ 3,
)
)
chosen
#|>
#  group_by(.category) |>
#  slice_head(n = first(.target)) |>
#  ungroup()
#list(
#chosen = chosen,
#total_cost  = sum(chosen$.cost),
#total_value = sum(chosen$.value)
#)
}
pick_with_alpha (0)
}
seed_1 <- greedy_seed_with_category_penalties(ranked_players,
budget,
element_limits,
cost_penalty)
seed_1
seed_1 |> relocate(.target)
greedy_seed_with_category_penalties <- function(
df,
budget,
category_targets,
lambdas,
id_col = "id",
score_col = "predicted_2026_points",
cost_col = "now_cost",
category_col = "element_name",
max_iter = 40
) {
# sanity checks
stopifnot(all(names(lambdas) %in% unique(df[[category_col]])))
# working df
X <- df |>
mutate(
.value    = !!sym(score_col),
.cost     = !!sym(cost_col),
.category = !!sym(category_col),
.id       = !!sym(id_col),
.lambda   = lambdas[.category]
)
pick_with_alpha <- function(alpha) {
cand <- X %>%
mutate(
.key = .value - (alpha * .lambda) * .cost,
.tiebreak = .value / pmax(.cost, 1e-9)
) %>%
arrange(.category, desc(.key), desc(.tiebreak), desc(.value), .cost)
chosen <- cand %>%
mutate(
.target = case_when(
.category == "GK" ~ 2,
.category == "DEF" ~ 5,
.category == "MID" ~ 5,
.category == "FWD" ~ 3,
)
)  |>
group_by(.category)
chosen
#|>
#  slice_head(n = first(.target)) |>
#  ungroup()
#list(
#chosen = chosen,
#total_cost  = sum(chosen$.cost),
#total_value = sum(chosen$.value)
#)
}
pick_with_alpha (0)
}
seed_1 <- greedy_seed_with_category_penalties(ranked_players,
budget,
element_limits,
cost_penalty)
seed_1 |> relocate(.target)
seed_1 |> slice_head(n = first(.target))
greedy_seed_hard_capped <- function(
df,
budget,
id_col    = "id",
cat_col   = "element_name",
cost_col  = "now_cost",
score_col = "predicted_2026_points",
max_iter  = 40
) {
# ---- Hard-coded category targets (EDIT THESE) ----
# Example FPL-style squad shape that sums to 15:
targets_tbl <- tribble(
~.category, ~.target,
"GKP",        2L,
"DEF",        5L,
"MID",        5L,
"FWD",        3L
)
# --------------------------------------------------
# Build working frame with standardized temp columns
X <- df %>%
transmute(
.id       = .data[[id_col]],
.category = as.character(.data[[cat_col]]),   # ensure character for joining
.cost     = as.numeric(.data[[cost_col]]),
.value    = as.numeric(.data[[score_col]])
)
# Check that all categories present in X exist in targets
miss <- setdiff(unique(X$.category), targets_tbl$.category)
if (length(miss)) {
stop("Missing targets for categories: ", paste(miss, collapse = ", "), call. = FALSE)
}
# Helper: given alpha, rank within each category and take the top N for that category
pick_with_alpha <- function(alpha) {
cand <- X %>%
mutate(
.key      = .value - alpha * .cost,
.tiebreak = .value / pmax(.cost, 1e-9)
) %>%
arrange(.category, desc(.key), desc(.tiebreak), desc(.value), .cost) %>%
left_join(targets_tbl, by = join_by(.category))
# Slice per category using the joined .target (guaranteed scalar per group)
chosen <- cand %>%
group_by(.category) %>%
group_modify(~ dplyr::slice_head(.x, n = as.integer(.x$.target[1]))) %>%
ungroup()
list(
chosen      = chosen,
total_cost  = sum(chosen$.cost),
total_value = sum(chosen$.value)
)
}
# ---- Binary search on alpha to meet budget ----
alpha_lo  <- 0
alpha_hi  <- 10      # start; will expand if needed
best      <- NULL
# Ensure alpha_hi is tight enough to get under budget
for (k in 1:10) {
trial <- pick_with_alpha(alpha_hi)
best  <- trial
if (trial$total_cost <= budget) break
alpha_hi <- alpha_hi * 2
}
if (best$total_cost > budget) {
warning("Could not meet budget even with strong cost penalty; returning cheapest-by-penalty pick.")
return(list(
selection   = best$chosen %>% select(.id, .category, now_cost = .cost, score = .value),
total_cost  = best$total_cost,
total_value = best$total_value,
alpha_used  = alpha_hi,
by_category = best$chosen %>% count(.category, name = "picked_n") %>% arrange(.category)
))
}
for (it in 1:max_iter) {
alpha_mid <- 0.5 * (alpha_lo + alpha_hi)
trial <- pick_with_alpha(alpha_mid)
if (trial$total_cost <= budget) {
best <- trial
alpha_hi <- alpha_mid
} else {
alpha_lo <- alpha_mid
}
if (abs(trial$total_cost - budget) <= 1e-6 || (alpha_hi - alpha_lo) < 1e-4) break
}
# ----------------------------------------------
# Return tidy outputs
list(
selection   = best$chosen %>%
select(.id, .category, now_cost = .cost, score = .value) %>%
arrange(.category, desc(score)),
total_cost  = best$total_cost,
total_value = best$total_value,
alpha_used  = alpha_hi,
by_category = best$chosen %>% count(.category, name = "picked_n") %>% arrange(.category)
)
}
seed_1 <- greedy_seed_hard_capped(ranked_players,
budget
)
greedy_seed_hard_capped <- function(
df,
budget,
id_col    = "id",
cat_col   = "element_name",
cost_col  = "now_cost",
score_col = "predicted_2026_points",
max_iter  = 40
) {
# ---- Hard-coded category targets (EDIT THESE) ----
# Example FPL-style squad shape that sums to 15:
targets_tbl <- tribble(
~.category, ~.target,
"GK",        2L,
"DEF",        5L,
"MID",        5L,
"FWD",        3L
)
# --------------------------------------------------
# Build working frame with standardized temp columns
X <- df %>%
transmute(
.id       = .data[[id_col]],
.category = as.character(.data[[cat_col]]),   # ensure character for joining
.cost     = as.numeric(.data[[cost_col]]),
.value    = as.numeric(.data[[score_col]])
)
# Check that all categories present in X exist in targets
miss <- setdiff(unique(X$.category), targets_tbl$.category)
if (length(miss)) {
stop("Missing targets for categories: ", paste(miss, collapse = ", "), call. = FALSE)
}
# Helper: given alpha, rank within each category and take the top N for that category
pick_with_alpha <- function(alpha) {
cand <- X %>%
mutate(
.key      = .value - alpha * .cost,
.tiebreak = .value / pmax(.cost, 1e-9)
) %>%
arrange(.category, desc(.key), desc(.tiebreak), desc(.value), .cost) %>%
left_join(targets_tbl, by = join_by(.category))
# Slice per category using the joined .target (guaranteed scalar per group)
chosen <- cand %>%
group_by(.category) %>%
group_modify(~ dplyr::slice_head(.x, n = as.integer(.x$.target[1]))) %>%
ungroup()
list(
chosen      = chosen,
total_cost  = sum(chosen$.cost),
total_value = sum(chosen$.value)
)
}
# ---- Binary search on alpha to meet budget ----
alpha_lo  <- 0
alpha_hi  <- 10      # start; will expand if needed
best      <- NULL
# Ensure alpha_hi is tight enough to get under budget
for (k in 1:10) {
trial <- pick_with_alpha(alpha_hi)
best  <- trial
if (trial$total_cost <= budget) break
alpha_hi <- alpha_hi * 2
}
if (best$total_cost > budget) {
warning("Could not meet budget even with strong cost penalty; returning cheapest-by-penalty pick.")
return(list(
selection   = best$chosen %>% select(.id, .category, now_cost = .cost, score = .value),
total_cost  = best$total_cost,
total_value = best$total_value,
alpha_used  = alpha_hi,
by_category = best$chosen %>% count(.category, name = "picked_n") %>% arrange(.category)
))
}
for (it in 1:max_iter) {
alpha_mid <- 0.5 * (alpha_lo + alpha_hi)
trial <- pick_with_alpha(alpha_mid)
if (trial$total_cost <= budget) {
best <- trial
alpha_hi <- alpha_mid
} else {
alpha_lo <- alpha_mid
}
if (abs(trial$total_cost - budget) <= 1e-6 || (alpha_hi - alpha_lo) < 1e-4) break
}
# ----------------------------------------------
# Return tidy outputs
list(
selection   = best$chosen %>%
select(.id, .category, now_cost = .cost, score = .value) %>%
arrange(.category, desc(score)),
total_cost  = best$total_cost,
total_value = best$total_value,
alpha_used  = alpha_hi,
by_category = best$chosen %>% count(.category, name = "picked_n") %>% arrange(.category)
)
}
seed_1 <- greedy_seed_hard_capped(ranked_players,
budget
)
seed_1
greedy_seed_hard_capped <- function(
df,
budget,
id_col    = "id",
cat_col   = "element_name",
cost_col  = "now_cost",
score_col = "predicted_2026_points",
max_iter  = 40
) {
# ---- Hard-coded category targets (EDIT THESE) ----
# Example FPL-style squad shape that sums to 15:
targets_tbl <- tribble(
~.category, ~.target,
"GK",        2L,
"DEF",        5L,
"MID",        5L,
"FWD",        3L
)
# --------------------------------------------------
# Build working frame with standardized temp columns
X <- df %>%
transmute(
.id       = .data[[id_col]],
.category = as.character(.data[[cat_col]]),   # ensure character for joining
.cost     = as.numeric(.data[[cost_col]]),
.value    = as.numeric(.data[[score_col]])
)
# Check that all categories present in X exist in targets
miss <- setdiff(unique(X$.category), targets_tbl$.category)
if (length(miss)) {
stop("Missing targets for categories: ", paste(miss, collapse = ", "), call. = FALSE)
}
# Helper: given alpha, rank within each category and take the top N for that category
pick_with_alpha <- function(alpha) {
cand <- X %>%
mutate(
.key      = .value - alpha * .cost,
.tiebreak = .value / pmax(.cost, 1e-9)
) %>%
arrange(.category, desc(.key), desc(.tiebreak), desc(.value), .cost) %>%
left_join(targets_tbl, by = join_by(.category))
# Slice per category using the joined .target (guaranteed scalar per group)
chosen <- cand %>%
group_by(.category) %>%
group_modify(~ dplyr::slice_head(.x, n = as.integer(.x$.target[1]))) %>%
ungroup()
list(
chosen      = chosen,
total_cost  = sum(chosen$.cost),
total_value = sum(chosen$.value)
)
}
# ---- Binary search on alpha to meet budget ----
alpha_lo  <- 0
alpha_hi  <- 10      # start; will expand if needed
best      <- NULL
# Ensure alpha_hi is tight enough to get under budget
for (k in 1:10) {
trial <- pick_with_alpha(alpha_hi)
best  <- trial
if (trial$total_cost <= budget) break
alpha_hi <- alpha_hi * 2
}
if (best$total_cost > budget) {
warning("Could not meet budget even with strong cost penalty; returning cheapest-by-penalty pick.")
return(list(
selection   = best$chosen %>% select(.id, .category, now_cost = .cost, score = .value),
total_cost  = best$total_cost,
total_value = best$total_value,
alpha_used  = alpha_hi,
by_category = best$chosen %>% count(.category, name = "picked_n") %>% arrange(.category)
))
}
for (it in 1:max_iter) {
alpha_mid <- 0.5 * (alpha_lo + alpha_hi)
trial <- pick_with_alpha(alpha_mid)
if (trial$total_cost <= budget) {
best <- trial
alpha_hi <- alpha_mid
} else {
alpha_lo <- alpha_mid
}
if (abs(trial$total_cost - budget) <= 1e-6 || (alpha_hi - alpha_lo) < 1e-4) break
}
# ----------------------------------------------
# Return tidy outputs
list(
selection   = best$chosen %>%
select(.id, web_name, .category, now_cost = .cost, score = .value) %>%
arrange(.category, desc(score)),
total_cost  = best$total_cost,
total_value = best$total_value,
alpha_used  = alpha_hi,
by_category = best$chosen %>% count(.category, name = "picked_n") %>% arrange(.category)
)
}
seed_1 <- greedy_seed_hard_capped(ranked_players,
budget
)
ranked_players
seed_1 <- greedy_seed_hard_capped(ranked_players,
budget
)
greedy_seed_hard_capped <- function(
df,
budget,
id_col    = "id",
cat_col   = "element_name",
cost_col  = "now_cost",
score_col = "predicted_2026_points",
max_iter  = 40
) {
# ---- Hard-coded category targets (EDIT THESE) ----
# Example FPL-style squad shape that sums to 15:
targets_tbl <- tribble(
~.category, ~.target,
"GK",        2L,
"DEF",        5L,
"MID",        5L,
"FWD",        3L
)
# --------------------------------------------------
# Build working frame with standardized temp columns
X <- df %>%
transmute(
.id       = .data[[id_col]],
.category = as.character(.data[[cat_col]]),   # ensure character for joining
.cost     = as.numeric(.data[[cost_col]]),
.value    = as.numeric(.data[[score_col]])
)
# Check that all categories present in X exist in targets
miss <- setdiff(unique(X$.category), targets_tbl$.category)
if (length(miss)) {
stop("Missing targets for categories: ", paste(miss, collapse = ", "), call. = FALSE)
}
# Helper: given alpha, rank within each category and take the top N for that category
pick_with_alpha <- function(alpha) {
cand <- X %>%
mutate(
.key      = .value - alpha * .cost,
.tiebreak = .value / pmax(.cost, 1e-9)
) %>%
arrange(.category, desc(.key), desc(.tiebreak), desc(.value), .cost) %>%
left_join(targets_tbl, by = join_by(.category))
# Slice per category using the joined .target (guaranteed scalar per group)
chosen <- cand %>%
group_by(.category) %>%
group_modify(~ dplyr::slice_head(.x, n = as.integer(.x$.target[1]))) %>%
ungroup()
list(
chosen      = chosen,
total_cost  = sum(chosen$.cost),
total_value = sum(chosen$.value)
)
}
# ---- Binary search on alpha to meet budget ----
alpha_lo  <- 0
alpha_hi  <- 10      # start; will expand if needed
best      <- NULL
# Ensure alpha_hi is tight enough to get under budget
for (k in 1:10) {
trial <- pick_with_alpha(alpha_hi)
best  <- trial
if (trial$total_cost <= budget) break
alpha_hi <- alpha_hi * 2
}
if (best$total_cost > budget) {
warning("Could not meet budget even with strong cost penalty; returning cheapest-by-penalty pick.")
return(list(
selection   = best$chosen %>% select(.id, .category, now_cost = .cost, score = .value),
total_cost  = best$total_cost,
total_value = best$total_value,
alpha_used  = alpha_hi,
by_category = best$chosen %>% count(.category, name = "picked_n") %>% arrange(.category)
))
}
for (it in 1:max_iter) {
alpha_mid <- 0.5 * (alpha_lo + alpha_hi)
trial <- pick_with_alpha(alpha_mid)
if (trial$total_cost <= budget) {
best <- trial
alpha_hi <- alpha_mid
} else {
alpha_lo <- alpha_mid
}
if (abs(trial$total_cost - budget) <= 1e-6 || (alpha_hi - alpha_lo) < 1e-4) break
}
# ----------------------------------------------
# Return tidy outputs
list(
selection   = best$chosen %>%
select(.id, .category, now_cost = .cost, score = .value) %>%
arrange(.category, desc(score)),
total_cost  = best$total_cost,
total_value = best$total_value,
alpha_used  = alpha_hi,
by_category = best$chosen %>% count(.category, name = "picked_n") %>% arrange(.category)
)
}
seed_1 <- greedy_seed_hard_capped(ranked_players,
budget
)
seed_1
?left_join
seed_1$selection |> left_join(ranked_players|> select(id, web_name))
seed_1$selection |> left_join(ranked_players|> select(id, web_name), .by = join_by(.id = id))
seed_1$selection |> left_join(ranked_players|> select(id, web_name), by = join_by(.id = id))
seed_1$selection |> left_join(ranked_players|> select(id, web_name), by = join_by(.id == id))
seed_1$selection |> left_join(ranked_players|> select(id, web_name), by = join_by(.id == id))|> print(n=16)
seed_1$selection |> left_join(ranked_players|> select(id, web_name), by = join_by(.id == id))|> print(n=16)
team_checker(seed_1$selection)
team_checker(seed_1$selection |> left_join(ranked_players))
team_checker(seed_1$selection |> left_join(ranked_players, by = join_by(.id == id)))
