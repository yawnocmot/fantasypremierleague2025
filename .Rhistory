filter(season_end==2026)|>
select(!score)
predicted_all_fixtures <- all_2026_fixtures |>
bind_cols(predict(weighted_fit, newdata = all_2026_fixtures, type = "response")) |>
rename(.pred = ...12)
offensive_rank <- predicted_all_fixtures|>
group_by(attacker_short_name)|>
rename(short_name = attacker_short_name)|>
summarise(offence_score = sum(.pred) /38)|>
arrange(desc(offence_score))
defensive_rank <- predicted_all_fixtures|>
group_by(defender_short_name)|>
rename(short_name = defender_short_name)|>
summarise(defence_score = sum(.pred) /38)|>
arrange(defence_score)
total_rank <- full_join(offensive_rank, defensive_rank) |>
mutate(advantage_score = offence_score - defence_score)|>
arrange(desc(advantage_score))|>
left_join(name_finder)|>
relocate(team)
total_rank
# next thing is to predict a league table
# Need to have each row be a match
# Want a function that can calculate the win, lose and draw probabilities from two poisson variables
# The skellam functions do this
# Want it to be for the future
predicted_future_fixtures <- fixtures_poisson_future |>
select(!score)|>
bind_cols(predict(weighted_fit, newdata = fixtures_poisson_future, type = "response")) |>
rename(.pred = ...12)
predict_future_rows <- predicted_future_fixtures|>
match_per_row(.pred)|>
mutate(prob_home_win = 1-pskellam(0,home,away),
prob_draw = dskellam(0,home,away),
prob_away_win = pskellam(-1,home,away)
)
# We want to combine the past scores with the predicted rows to create a table
past_rows <- fixtures_poisson_past|>
match_per_row(score) |>
filter(season_end == 2026)|>
mutate(prob_home_win = as.numeric(home > away),
prob_draw = as.numeric(home == away),
prob_away_win = as.numeric(away > home)
)
predict_match_rows <- bind_rows(past_rows, predict_future_rows)
# next format this as a league table
home_record <- summarise(predict_match_rows,
.by = home_short_name,
home_wins = sum(prob_home_win),
home_draws = sum(prob_draw),
home_losses = sum(prob_away_win)
)|>
rename(short_name = home_short_name)
away_record <- summarise(predict_match_rows,
.by = away_short_name,
away_wins = sum(prob_away_win),
away_draws = sum(prob_draw),
away_losses = sum(prob_home_win)
)|>
rename(short_name = away_short_name)
pred_future_table <- left_join(home_record, away_record, by = join_by(short_name))|>
mutate(
wins = home_wins + away_wins,
draws = home_draws + away_draws,
losses = home_losses + away_losses,
points = 3*wins + draws,
.keep = "unused"
)|>
arrange(desc(points))
# Then display this alongside 'now' ranks, as the final summary table
display_table <- left_join(pred_future_table, total_rank, by = join_by(short_name))|>
select(team, short_name, offence_score, defence_score, points, wins, draws, losses) |>
mutate(across(where(is.numeric), ~ format(round(.,1), nsmall = 1)))
display_table
#| label: game_predictions
predict_future_rows <- predict_future_rows|>
mutate(
prob_home_clean_sheet = dpois(0,away),
prob_away_clean_sheet = dpois(0,home)
)
write_csv(predict_future_rows,"processed_data/predict_future_rows.csv")
#| label: set-up
#| include: false
#Set up libraries required in addition to what is in get data
library(tidyverse)
library(tidymodels)
# Import required data
predict_future_rows <- read_csv("processed_data/predict_future_rows.csv")
fpl_elements <- read_csv("processed_data/fpl_elements.csv")
vaastav_2025 <- read_csv("processed_data/vaastav_2025.csv")
team_name_finder <- read_csv("processed_data/name_finder.csv")
champ_players_2025 <- read_csv("processed_data/champ_players_2025.csv")
#| label: player-data
# Lots of data in the fpl_elements tab - for now we need name, ID, element type, team_code, now_cost. Might come back for other data.
player_data <- fpl_elements |>
select(
first_name, second_name, web_name, id,
element_type, team_code, now_cost, minutes_fpl = minutes
) |>
left_join(team_name_finder, join_by(team_code == code))
# Create an exponential back-off summary for goals scored, assists, and minutes in Vaastav data
decay_parameter <- 0.005
player_2025_summary <- vaastav_2025 |>
filter(!is.na(id_2026))|>
mutate(
assists = as.numeric(assists),
minutes_any = as.numeric(minutes>0),
minutes_60_plus = as.numeric(minutes>60),
days_ago = (today() %--% kickoff_time)/days(1),
weight = exp(decay_parameter*days_ago)
)|>
group_by(id_2026)|>
summarise(
minutes_any_weighted = weighted.mean(minutes_any,weight),
minutes_60_weighted = weighted.mean(minutes_60_plus,weight),
goals_weighted = weighted.mean(goals_scored, weight),
assists_weighted = weighted.mean(assists, weight)
)
# Have to come back here to add in 2025-26 gameweeks straight from FPL.
# Now match this to our player dataset
player_data <- player_data|>
left_join(player_2025_summary, join_by(id == id_2026))
# Which players don't have a match? 164 now, out of 663. Let's look by team
player_data |>
filter(is.na(minutes_any_weighted))|>
count(short_name,sort = TRUE)
# Sunderland, Burnley and Leeds have high numbers which is to be expected, but account for less than half of the total. The rest are those with high numbers of transfers, but let's take a closer look and flag those where you would expect a match.
# Is there a new player flag in the dataset? Well not explicit - but past payers have data from the previous season. Best we can do is minutes - won't reveal which players have data which didn't match, but didn't get any minutes. That's kind of fine though!
changed_name <- player_data |>
filter(minutes_fpl>0,
is.na(minutes_any_weighted))|>
mutate(name = str_c(first_name, " ", second_name),.before = 1)
changed_name
# This is the problem list - went back and hard-coded. Possible this will change as transfers happen (e.g. if an Ipswich player joins a PL team). So check again.
# Rest of the players with missing data are new to the PL - we need to create some data for them.
# For newly promoted teams take data from Championship. A few players played more than once. Also some might have the same name... Not worried about players who played in championship and prem - just use prem data - rows_patch will help this.
fpl_champ_players <- champ_players_2025 |>
filter(!is.na(id_2026))|>
mutate(minutes_any_weighted = minutes_any/46,
minutes_60_weighted = minutes_any/46,
goals_weighted = goals/46,
assists_weighted = assists/46)|>
group_by(id_2026)|>
summarise(
minutes_any_weighted = sum(minutes_any_weighted),
minutes_60_weighted = sum(minutes_60_weighted),
goals_weighted = sum(goals_weighted),
assists_weighted = sum(assists_weighted)
)|>
rename(id = id_2026)
player_data <- player_data|>
rows_patch(fpl_champ_players)
# Check again by team:
player_data |>
filter(is.na(minutes_any_weighted)) |>
count(short_name,sort = TRUE)
# Down to 106, Sunderland still very high - have a look through the players if something has gone wrong with names. No - looks like Sunderland just have loads of new players. So done here.
# For incoming players, create dummy data based on team-mates - take the worst player in that position (conservative approach)
worst_player <- player_data |>
group_by(element_type, team_code) |>
summarise(
minutes_any_weighted = min(minutes_any_weighted, na.rm = TRUE),
minutes_60_weighted = min(minutes_60_weighted, na.rm = TRUE),
goals_weighted = min(goals_weighted, na.rm = TRUE),
assists_weighted = min(assists_weighted, na.rm = TRUE)
)
new_player_dummy <- player_data |>
filter(is.na(minutes_any_weighted))|>
select(id, team_code, element_type)|>
left_join(worst_player, join_by(team_code == team_code, element_type == element_type))
player_data <- player_data |>
rows_patch(new_player_dummy)
#| label: player-score-predict
# First step is to work out proportion of goals and assists the player will get for their team:
# Summarise goals and assists per team
goals_per_team <- player_data |>
group_by(team_code)|>
summarise(team_goals = sum(goals_weighted),
team_assists = sum(assists_weighted))
# Look at what proportion are scored by each player
player_data <- player_data |>
left_join(goals_per_team) |>
mutate(prop_goals = goals_weighted/team_goals,
prop_assists = assists_weighted/team_assists)
# Next to look at goals/clean sheets the team will score at upcoming matches, with a decay parameter
# Adjust predict_future_rows to give key info per team each game week.
team_scores_per_week <- predict_future_rows |>
pivot_longer(
cols = c(home, away),
names_to = "home_or_away",
values_to = "goals"
) |>
mutate(
attacker_short_name = if_else(home_or_away == "home",
home_short_name,
away_short_name),
defender_short_name = if_else(home_or_away == "home",
away_short_name,
home_short_name),
prob_clean_sheet = if_else(home_or_away == "home",
prob_home_clean_sheet,
prob_away_clean_sheet)
) |>
select(round_number, match_number, date_utc, home_or_away,
attacker_short_name, defender_short_name, goals, prob_clean_sheet)
future_decay_parameter <- 0.005
goals_against <- team_scores_per_week |>
mutate (
days_from_now = (date_utc %--% today())/days(1),
weight = exp(decay_parameter*days_from_now)
) |>
group_by(defender_short_name)|>
summarise(
weighted_2026_goals_against = sum(goals*weight)
) |>
rename(short_name = defender_short_name)
team_weighted_stats <- team_scores_per_week |>
mutate (
days_from_now = (date_utc %--% today())/days(1),
weight = exp(decay_parameter*days_from_now)
) |>
group_by(attacker_short_name)|>
summarise(
weighted_2026_goals = sum(goals*weight),
weighted_2026_clean_sheets = sum(prob_clean_sheet*weight),
weighted_2026_games = sum(weight)
) |>
rename(short_name = attacker_short_name)|>
left_join(goals_against)
# Come back to this - account for wildcards etc. to have time limits. Is it better in fact to match at a gameweek level - bigger file but more flexibility.
# Finally turn this into estimated points
# Bring together player and team data
player_data <- player_data |>
left_join(team_weighted_stats) |>
mutate(
goals_predict_2026 = prop_goals * weighted_2026_goals,
assists_predict_2026 = prop_assists * weighted_2026_goals,
play_predict_2026 = minutes_any_weighted * weighted_2026_games +
minutes_60_weighted * weighted_2026_games,
goals_against_predict_2026 = minutes_any_weighted * weighted_2026_goals_against,
clean_sheets_predict_2026 = minutes_60_weighted * weighted_2026_clean_sheets
) |>
mutate(
predicted_2026_points = case_when(
element_type == 1 ~ play_predict_2026 + 4*clean_sheets_predict_2026
+ 10*goals_predict_2026 + 3*assists_predict_2026
- 0.5*goals_against_predict_2026,
element_type == 2 ~ play_predict_2026 + 4*clean_sheets_predict_2026
+ 6*goals_predict_2026 + 3*assists_predict_2026
- 0.5*goals_against_predict_2026,
element_type == 3 ~ play_predict_2026 + 1*clean_sheets_predict_2026
+ 5*goals_predict_2026 + 3*assists_predict_2026,
element_type == 4 ~ play_predict_2026
+ 4*goals_predict_2026 + 3*assists_predict_2026
)
)
player_data |>
arrange(desc(predicted_2026_points))
# MUST GO BACK AND FIX GOALS AGAINST BEFORE CONTINUING
# ALSO INJURIES / TRANSFERS
predict_future_rows
?dpois
#| label: game_predictions
# Putting together probabilities of clean sheets and lots of goals scored
predict_future_rows <- predict_future_rows|>
mutate(
prob_home_clean_sheet = dpois(0,away),
prob_away_clean_sheet = dpois(0,home),
prob_home_concede_2 = 1-ppois(1,away),
prob_away_concede_2 = 1-ppois(1,home),
prob_home_concede_4 = 1-ppois(3,away),
prob_away_concede_4 = 1-ppois(3,home)
)
write_csv(predict_future_rows,"processed_data/predict_future_rows.csv")
predict_future_rows
predict_future_rows |> relocate(prob_home_concede_2, prob_home_concede_4, prob_away_concede_2, prob_away_concede_4)
predict_future_rows |> relocate(prob_home_concede_2, prob_home_concede_4, prob_away_concede_2, prob_away_concede_4, home_team, away_team)
write_csv(predict_future_rows,"processed_data/predict_future_rows.csv")
predict_future_rows <- read_csv("processed_data/predict_future_rows.csv")
#| label: player-data
# Lots of data in the fpl_elements tab - for now we need name, ID, element type, team_code, now_cost. Might come back for other data.
player_data <- fpl_elements |>
select(
first_name, second_name, web_name, id,
element_type, team_code, now_cost, minutes_fpl = minutes
) |>
left_join(team_name_finder, join_by(team_code == code))
decay_parameter <- 0.005
player_2025_summary <- vaastav_2025 |>
filter(!is.na(id_2026))|>
mutate(
assists = as.numeric(assists),
minutes_any = as.numeric(minutes>0),
minutes_60_plus = as.numeric(minutes>60),
days_ago = (today() %--% kickoff_time)/days(1),
weight = exp(decay_parameter*days_ago)
)|>
group_by(id_2026)|>
summarise(
minutes_any_weighted = weighted.mean(minutes_any,weight),
minutes_60_weighted = weighted.mean(minutes_60_plus,weight),
goals_weighted = weighted.mean(goals_scored, weight),
assists_weighted = weighted.mean(assists, weight)
)
# Now match this to our player dataset
player_data <- player_data|>
left_join(player_2025_summary, join_by(id == id_2026))
player_data |>
filter(is.na(minutes_any_weighted))|>
count(short_name,sort = TRUE)
changed_name <- player_data |>
filter(minutes_fpl>0,
is.na(minutes_any_weighted))|>
mutate(name = str_c(first_name, " ", second_name),.before = 1)
changed_name
fpl_champ_players <- champ_players_2025 |>
filter(!is.na(id_2026))|>
mutate(minutes_any_weighted = minutes_any/46,
minutes_60_weighted = minutes_any/46,
goals_weighted = goals/46,
assists_weighted = assists/46)|>
group_by(id_2026)|>
summarise(
minutes_any_weighted = sum(minutes_any_weighted),
minutes_60_weighted = sum(minutes_60_weighted),
goals_weighted = sum(goals_weighted),
assists_weighted = sum(assists_weighted)
)|>
rename(id = id_2026)
player_data <- player_data|>
rows_patch(fpl_champ_players)
# Check again by team:
player_data |>
filter(is.na(minutes_any_weighted)) |>
count(short_name,sort = TRUE)
worst_player <- player_data |>
group_by(element_type, team_code) |>
summarise(
minutes_any_weighted = min(minutes_any_weighted, na.rm = TRUE),
minutes_60_weighted = min(minutes_60_weighted, na.rm = TRUE),
goals_weighted = min(goals_weighted, na.rm = TRUE),
assists_weighted = min(assists_weighted, na.rm = TRUE)
)
new_player_dummy <- player_data |>
filter(is.na(minutes_any_weighted))|>
select(id, team_code, element_type)|>
left_join(worst_player, join_by(team_code == team_code, element_type == element_type))
player_data <- player_data |>
rows_patch(new_player_dummy)
#| label: player-score-predict
# First step is to work out proportion of goals and assists the player will get for their team:
# Summarise goals and assists per team
goals_per_team <- player_data |>
group_by(team_code)|>
summarise(team_goals = sum(goals_weighted),
team_assists = sum(assists_weighted))
player_data <- player_data |>
left_join(goals_per_team) |>
mutate(prop_goals = goals_weighted/team_goals,
prop_assists = assists_weighted/team_assists)
team_scores_per_week <- predict_future_rows |>
pivot_longer(
cols = c(home, away),
names_to = "home_or_away",
values_to = "goals"
) |>
mutate(
attacker_short_name = if_else(home_or_away == "home",
home_short_name,
away_short_name),
defender_short_name = if_else(home_or_away == "home",
away_short_name,
home_short_name),
prob_clean_sheet = if_else(home_or_away == "home",
prob_home_clean_sheet,
prob_away_clean_sheet)
) |>
select(round_number, match_number, date_utc, home_or_away,
attacker_short_name, defender_short_name, goals, prob_clean_sheet)
team_scores_per_week
team_scores_per_week <- predict_future_rows |>
pivot_longer(
cols = c(home, away),
names_to = "home_or_away",
values_to = "goals"
) |>
mutate(
attacker_short_name = if_else(home_or_away == "home",
home_short_name,
away_short_name),
defender_short_name = if_else(home_or_away == "home",
away_short_name,
home_short_name),
prob_clean_sheet = if_else(home_or_away == "home",
prob_home_clean_sheet,
prob_away_clean_sheet),
prob_concede_2 = if_else(home_or_away == "home",
prob_home_concede_2,
prob_away_concede_2),
prob_concede_4 = if_else(home_or_away == "home",
prob_home_concede_4,
prob_away_concede_4)
) |>
select(round_number, match_number, date_utc, home_or_away,
attacker_short_name, defender_short_name, goals, prob_clean_sheet)
team_scores_per_week
team_scores_per_week <- predict_future_rows |>
pivot_longer(
cols = c(home, away),
names_to = "home_or_away",
values_to = "goals"
) |>
mutate(
attacker_short_name = if_else(home_or_away == "home",
home_short_name,
away_short_name),
defender_short_name = if_else(home_or_away == "home",
away_short_name,
home_short_name),
prob_clean_sheet = if_else(home_or_away == "home",
prob_home_clean_sheet,
prob_away_clean_sheet),
prob_concede_2 = if_else(home_or_away == "home",
prob_home_concede_2,
prob_away_concede_2),
prob_concede_4 = if_else(home_or_away == "home",
prob_home_concede_4,
prob_away_concede_4)
) |>
select(round_number, match_number, date_utc, home_or_away,
attacker_short_name, defender_short_name, goals, prob_clean_sheet,
prob_concede_2, prob_concede_4)
team_scores_per_week
team_scores_per_week |> select(home_or_away, attacker_short_name, defender_short_nane, prob_concede_2, prob_concede_4)
team_scores_per_week |> select(home_or_away, attacker_short_name, defender_short_name, prob_concede_2, prob_concede_4)
team_scores_per_week |> select(home_or_away, attacker_short_name, defender_short_name, prob_concede_2, prob_concede_4)|> filter(attacker_short_name == "TOT")
team_scores_per_week |> select(home_or_away, attacker_short_name, defender_short_name, prob_clean_sheet prob_concede_2, prob_concede_4)|> filter(attacker_short_name == "TOT")
team_scores_per_week |> select(home_or_away, attacker_short_name, defender_short_name, prob_clean_sheet, prob_concede_2, prob_concede_4)|> filter(attacker_short_name == "TOT")
team_weighted_stats <- team_scores_per_week |>
mutate (
days_from_now = (date_utc %--% today())/days(1),
weight = exp(decay_parameter*days_from_now)
) |>
group_by(attacker_short_name)|>
summarise(
weighted_2026_goals = sum(goals*weight),
weighted_2026_clean_sheets = sum(prob_clean_sheet*weight),
weighted_2026_concede_2 = sum(prob_concede_2*weight),
weighted_2026_concede_4 = sum(prob_concede_4*weight),
weighted_2026_games = sum(weight)
) |>
rename(short_name = attacker_short_name)|>
left_join(goals_against)
player_data <- player_data |>
left_join(team_weighted_stats) |>
mutate(
goals_predict_2026 = prop_goals * weighted_2026_goals,
assists_predict_2026 = prop_assists * weighted_2026_goals,
play_predict_2026 = minutes_any_weighted * weighted_2026_games +
minutes_60_weighted * weighted_2026_games,
goals_against_predict_2026 = minutes_any_weighted * weighted_2026_goals_against,
clean_sheets_predict_2026 = minutes_60_weighted * weighted_2026_clean_sheets,
concede_2_predict_2026 = minutes_60_weighted * weighted_2026_concede_2,
concede_4_predict_2026 = minutes_60_weighted * weighted_2026_concede_4
) |>
mutate(
predicted_2026_points = case_when(
element_type == 1 ~ play_predict_2026 + 4*clean_sheets_predict_2026
+ 10*goals_predict_2026 + 3*assists_predict_2026
- 0.5*goals_against_predict_2026, #CONCEDE GOALS
element_type == 2 ~ play_predict_2026 + 4*clean_sheets_predict_2026
+ 6*goals_predict_2026 + 3*assists_predict_2026
- 0.5*goals_against_predict_2026,
element_type == 3 ~ play_predict_2026 + 1*clean_sheets_predict_2026
+ 5*goals_predict_2026 + 3*assists_predict_2026,
element_type == 4 ~ play_predict_2026
+ 4*goals_predict_2026 + 3*assists_predict_2026
)
)
player_data |>
arrange(desc(predicted_2026_points))
player_data <- player_data |>
left_join(team_weighted_stats) |>
mutate(
goals_predict_2026 = prop_goals * weighted_2026_goals,
assists_predict_2026 = prop_assists * weighted_2026_goals,
play_predict_2026 = minutes_any_weighted * weighted_2026_games +
minutes_60_weighted * weighted_2026_games,
goals_against_predict_2026 = minutes_any_weighted * weighted_2026_goals_against,
clean_sheets_predict_2026 = minutes_60_weighted * weighted_2026_clean_sheets,
concede_2_predict_2026 = minutes_60_weighted * weighted_2026_concede_2,
concede_4_predict_2026 = minutes_60_weighted * weighted_2026_concede_4
) |>
mutate(
predicted_2026_points = case_when(
element_type == 1 ~ play_predict_2026 + 4*clean_sheets_predict_2026
+ 10*goals_predict_2026 + 3*assists_predict_2026
- 0.5*goals_against_predict_2026
- concede_2_predict_2026 - concede_4_predict_2026,
element_type == 2 ~ play_predict_2026 + 4*clean_sheets_predict_2026
+ 6*goals_predict_2026 + 3*assists_predict_2026
- 0.5*goals_against_predict_2026
- concede_2_predict_2026 - concede_4_predict_2026,
element_type == 3 ~ play_predict_2026 + 1*clean_sheets_predict_2026
+ 5*goals_predict_2026 + 3*assists_predict_2026,
element_type == 4 ~ play_predict_2026
+ 4*goals_predict_2026 + 3*assists_predict_2026
)
)
player_data |>
arrange(desc(predicted_2026_points))
q()
